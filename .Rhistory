# Add a week column.
photo.df <- photo.df %>%
mutate(week=week(datetime), week=paste0('week_', week))
# Nest the data frame.
photo.nest <- photo.df %>% group_nest(week)
# Split the data frame by week and save as separate csvs.
walk2(photo.nest$week, photo.nest$data, function(week, data) {
path <-  paste0(site.dir, '/', week, '/', site, '_photos_', week, '.csv')
dir.create(dirname(path), recursive=TRUE, showWarning=FALSE)
write.csv(data, file=path, row.names=FALSE)
})
# Copy the photos into the appropriate directories.
walk2(photo.df$week, photo.df$filename, function(week, filename) {
target <-  paste0(site.dir, '/', week, '/', filename)
source <- file.path(path.in, filename)
file.copy(source, target)
})
# Fill in these three things:
# Where are the pictures now?
path.in <- 'D:/RECONYX/Turbid/101RECNX_Turbid/'
# What site is it?
site <- 'TCR2'
# Where are the pictures going?
# END WITH A FORWARD SLASH
path.out <- 'E:/'
# Make a new directory for the files.
site.dir <- paste0(path.out, site)
# Get a list of the photos.
photo.list <- list.files(path.in, full.names=TRUE) %>%
exif_read(tags=c('filename', 'CreateDate', 'SerialNumber'))
# Create a data frame.
photo.df <- photo.list %>%
dplyr::select(filename=FileName, datetime=CreateDate,
serial=SerialNumber) %>%
mutate(site=site, datetime=ymd_hms(datetime)) %>%
add_column(interest='', live.chicks='', class='', family='',
genus='', species='', common='', size='', comments='')
# Save a csv with all the photos.
write.csv(photo.df,
file=paste0(site.dir, '/', site, '_photos_all.csv'),
row.names=FALSE)
# Add a week column.
photo.df <- photo.df %>%
mutate(week=week(datetime), week=paste0('week_', week))
# Nest the data frame.
photo.nest <- photo.df %>% group_nest(week)
# Split the data frame by week and save as separate csvs.
walk2(photo.nest$week, photo.nest$data, function(week, data) {
path <-  paste0(site.dir, '/', week, '/', site, '_photos_', week, '.csv')
dir.create(dirname(path), recursive=TRUE, showWarning=FALSE)
write.csv(data, file=path, row.names=FALSE)
})
# Copy the photos into the appropriate directories.
walk2(photo.df$week, photo.df$filename, function(week, filename) {
target <-  paste0(site.dir, '/', week, '/', filename)
source <- file.path(path.in, filename)
file.copy(source, target)
})
# Fill in these three things:
# Where are the pictures now?
path.in <- 'D:/RECONYX/Turbid/102RECNX_Turbid/'
# What site is it?
site <- 'TCR3'
# Where are the pictures going?
# END WITH A FORWARD SLASH
path.out <- 'E:/'
# Make a new directory for the files.
site.dir <- paste0(path.out, site)
dir.create(site.dir)
# Get a list of the photos.
photo.list <- list.files(path.in, full.names=TRUE) %>%
exif_read(tags=c('filename', 'CreateDate', 'SerialNumber'))
# Create a data frame.
photo.df <- photo.list %>%
dplyr::select(filename=FileName, datetime=CreateDate,
serial=SerialNumber) %>%
mutate(site=site, datetime=ymd_hms(datetime)) %>%
add_column(interest='', live.chicks='', class='', family='',
genus='', species='', common='', size='', comments='')
# Save a csv with all the photos.
write.csv(photo.df,
file=paste0(site.dir, '/', site, '_photos_all.csv'),
row.names=FALSE)
# Add a week column.
photo.df <- photo.df %>%
mutate(week=week(datetime), week=paste0('week_', week))
# Nest the data frame.
photo.nest <- photo.df %>% group_nest(week)
# Split the data frame by week and save as separate csvs.
walk2(photo.nest$week, photo.nest$data, function(week, data) {
path <-  paste0(site.dir, '/', week, '/', site, '_photos_', week, '.csv')
dir.create(dirname(path), recursive=TRUE, showWarning=FALSE)
write.csv(data, file=path, row.names=FALSE)
})
# Copy the photos into the appropriate directories.
walk2(photo.df$week, photo.df$filename, function(week, filename) {
target <-  paste0(site.dir, '/', week, '/', filename)
source <- file.path(path.in, filename)
file.copy(source, target)
})
# Load some libraries.
library('tidyverse')
library('lubridate')
vi.2018 <- read.csv('../data/external/VI_surveydata_2018.csv',
header=TRUE, stringsAsFactors=FALSE)
colnames(vi.2018)
# The first column has a strange name, fix that.
vi.2018 <- rename(vi.2018, SiteName=1)
# Select only observations of nests.
vi.nest.assess.2018 <- vi.2018 %>%
filter(NestAssess == 'Yes')
nrow(vi.nest.assess.2018)
n_distinct(vi.nest.assess.2018$SiteName)
# List sites at which nest assessments were conducted.
distinct(vi.nest.assess.2018, SiteName)
# Which ones had active nests?
vi.nest.assess.2018 %>% dplyr::select(SiteName, NestStatus) %>%
filter(NestStatus == 'Active')
# Load 2019 data.
vi.2019 <- read.csv('../data/external/VI_surveydata_2019.csv',
header=TRUE, stringsAsFactors=FALSE)
colnames(vi.2019)
# Also has weird first column name.
vi.2019 <- rename(vi.2019, SiteName=1)
# Problem... different variable names.
vi.2019 %>% group_by(Nest.Assessment) %>%
summarize(n())
# Select only observations of nests.
vi.nest.assess.2019 <- vi.2019 %>% filter(Nest.Status != "")
# List sites at which nest assessments were conducted.
distinct(vi.nest.assess.2019, SiteName)
# Which ones had active nests?
vi.nest.assess.2019 %>% dplyr::select(SiteName, Nest.Status) %>%
filter(Nest.Status == 'Active')
sites.b <- intersect(vi.nest.assess.2018$SiteName,
vi.nest.assess.2019$SiteName)
sites.b
voucher.2019 <- vi.2019 %>% filter(Sign.Type %in% c('RP', 'DC')) %>%
distinct(vi.2019, SiteName)
voucher.2018 <- vi.2018 %>% filter(SignType == 'FE') %>%
distinct(vi.2019, SiteName)
voucher.sites <- bind_rows(voucher.2019, voucher.2018, .id='year')
voucher.sites
nest.assess <- union(vi.nest.assess.2018$SiteName,
vi.nest.assess.2019$SiteName)
setdiff(voucher.sites$SiteName, nest.assess)
sites.2019 <- vi.2019 %>% filter(Nest.Status != "") %>%
mutate(a.2019=case_when(Nest.Status == 'Active' ~ 1,
TRUE ~ 0)) %>%
mutate(v.2019=case_when(Sign.Type %in% c('RP', 'DC', 'CR', 'RP') ~ 1,
TRUE ~ 0)) %>%
group_by(SiteName) %>%
summarise(a.2019=max(a.2019), v.2019=max(v.2019)) %>%
dplyr::select(SiteName, a.2019, v.2019)
sites.2018 <- vi.2018 %>% filter(NestStatus != "") %>%
mutate(a.2018=case_when(NestStatus == 'Active' ~ 1,
TRUE ~ 0)) %>%
mutate(v.2018=case_when(SignType %in% c('RP', 'DC', 'CR', 'RP') ~ 1,
TRUE ~ 0)) %>%
group_by(SiteName) %>%
summarise(a.2018=max(a.2018), v.2018=max(v.2018)) %>%
dplyr::select(SiteName, a.2018, v.2018)
sites <- bind_rows(sites.2018, sites.2019) %>%
group_by(SiteName) %>%
summarise(a.2018=max(a.2018), v.2018=max(v.2018),
a.2019=max(a.2019), v.2019=max(v.2019)) %>%
replace_na(list(a.2018=NA, v.2018=0, a.2019=NA, v.2019=0))
View(sites)
sites2 <- distinct(sites)
View(sites2)
sites2 <- trimws(sites)
sites2 <- distinct(sites)
sites[1, ]
sites2 <- sites[-1, ]
View(sites2)
sites2 <- sites[-(1), ]
write.csv(sites, '../data/interim/VI_sites')
write.csv(sites, '../data/interim/VI_sites.csv')
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Load some libraries.
library('tidyverse')
library('lubridate')
# Import some data.
dt <- read_csv('../data/interim/camera_corrected.csv')
tl <- read_csv('../data/processed/telemetry_2018-2019.csv')
# Only 2 sites have both cameras and telemetry (so far): MTC and RLK.
rlk.t <- tl %>% filter(site == 'RLK')
rlk.c <- dt %>% filter(site == 'RLK' & interest == 'delivery')
mtc.c <- dt %>% filter(site == 'MTC' & interest == 'delivery')
mtc.t <- tl %>% filter(id == 'HAR09')
mtc.c.test <- mtc.c
mtc.c.test <- mtc.c
mtc.c.test <- mtc.c
mtc.c.test <- mtc.c %>% mutate(end=datetime - hours(1), start=datetime,
cap.per=interval(start, end))
library(fuzzyjoin)
fuzzy_left_join(
mtc.t,
mtc.c.test,
by = c("datetime" = "start", "datetime" = "end"),
match_fun = list(`>=`, `<=`)) %>%
filter(!is.na(start))# %>%
fuzzy_left_join(
mtc.t,
mtc.c.test,
by = c("datetime" = "start", "datetime" = "end"),
match_fun = list(`>=`, `<=`)) #%>%
fuz <- fuzzy_left_join(
mtc.t,
mtc.c.test,
by = c("datetime" = "start", "datetime" = "end"),
match_fun = list(`>=`, `<=`)) #%>%
View(fuz)
View(mtc.c.test)
merge(mtc.c.test, mtc.t)
t.vec <- as.vector(mtc.c.test$cap.per)
t.vec
t.vec <- list(mtc.c.test$cap.per)
t.vec
t.vec <- as.list(mtc.c.test$cap.per)
t.vec
mtc.t$datetime %in% t.vec
mtc.t$datetime %in% unlist(Map(`:`, mtc.c.test$start, mtc.c.test$end))
events <- mtc.t$datetime %in% unlist(Map(`:`, mtc.c.test$start, mtc.c.test$end))
mtc.t$tf <- mtc.t$datetime %in% unlist(Map(`:`, mtc.c.test$start, mtc.c.test$end))
mtc.t %>% filter(tf == TRUE)
# Create a range starting one hour before the delivery.
mtc.c <- mtc.c %>% mutate(end=datetime - hours(1), start=datetime)
# Annotate telemetry points that fall within those ranges.
mtc.t$in.range <- mtc.t$datetime %in% unlist(Map(`:`, mtc.c$start, mtc.c$end))
mtc.t %>% filter(tf == TRUE) %>% summarize(n())
mtc.t %>% filter(in.range == TRUE) %>% summarize(n())
mtc.caps %>% filter(in.range == TRUE)
library(ggplot2)
ggplot(data=mtc.caps, aes(x=lon, y=lat)) +
geom_point() +
theme_class()
mtc.caps <- mtc.c %>% filter(in.range == TRUE)
mtc.caps <- mtc.t %>% filter(in.range == TRUE)
ggplot(data=mtc.caps, aes(x=lon, y=lat)) +
geom_point() +
theme_class()
ggplot(data=mtc.caps, aes(x=lon, y=lat)) +
geom_point() +
theme_classic()
ggplot(data=mtc.caps, aes(x=lon, y=lat, group=day(datetime))) +
geom_point() +
theme_classic()
ggplot(data=mtc.caps, aes(x=lon, y=lat, color=day(datetime))) +
geom_point() +
theme_classic()
ggplot(data=mtc.caps, aes(x=lon, y=lat, color=as.factor(day(datetime)))) +
geom_point() +
theme_classic()
ggplot(data=mtc.caps, aes(x=lon, y=lat, shape=as.factor(day(datetime)))) +
geom_point() +
theme_classic()
# Create a range starting one hour before the delivery.
mtc.c <- mtc.c %>% mutate(end=datetime - hours(1.5), start=datetime)
# Create a range starting one hour before the delivery.
mtc.c <- mtc.c %>% mutate(end=datetime - hours(2), start=datetime)
# Annotate telemetry points that fall within those ranges.
mtc.t$in.range <- mtc.t$datetime %in% unlist(Map(`:`, mtc.c$start, mtc.c$end))
mtc.t %>% filter(in.range == TRUE) %>% summarize(n())
mtc.caps <- mtc.t %>% filter(in.range == TRUE)
ggplot(data=mtc.caps, aes(x=lon, y=lat, color=as.factor(day(datetime)))) +
geom_point() +
theme_classic()
ggplot(data=mtc.caps, aes(x=lon, y=lat)) +
geom_point() +
facet_wrap(~as.factor(day(datetime))) +
theme_classic()
ggplot(data=mtc.caps, aes(x=lon, y=lat, color=time)) +
geom_point() +
facet_wrap(~as.factor(day(datetime))) +
theme_classic()
mtc.cap.days <- mtc.cap$date
mtc.cap.days <- mtc.caps$date
mtc.cap.days <- mtc.caps$date %>% distinct()
mtc.cap.days <- mtc.caps$date
mtc.cap.days <- mtc.caps %>% dplyr::select(date)
mtc.cap.days <- mtc.caps %>% dplyr::select(date) %>%
distinct()
View(mtc.cap.days)
# Create a range starting two hours before the delivery.
mtc.c <- mtc.c %>% mutate(end=datetime - hours(1), start=datetime)
# Annotate telemetry points that fall within those ranges.
mtc.t$in.range <- mtc.t$datetime %in% unlist(Map(`:`, mtc.c$start, mtc.c$end))
mtc.t %>% filter(in.range == TRUE) %>% summarize(n())
mtc.t$date %in% mtc.cap.days$date)
mtc.t$date %in% mtc.cap.days$date
# Pull out all telemetry locations for those days.
mtc.t$del.day <- mtc.t$date %in% mtc.cap.days$date
# And put them in a separate frame.
mtc.del.day <- filter(del.day == TRUE)
# And put them in a separate frame.
mtc.del.day <- mtc.t %>% filter(del.day == TRUE)
mtc.caps <- mtc.t %>% filter(in.range == TRUE)
nrow(mtc.caps)
ggplot() +
geom_point(data=mtc.caps, aes(x=lon, y=lat, color=time)) +
facet_wrap(~as.factor(day(datetime))) +
theme_classic()
ggplot(data=mtc.caps, aes(x=lon, y=lat, color=time)) +
geom_point() +
#facet_wrap(~as.factor(day(datetime))) +
geom_point(data=mtc.del.day, aes(x=lon, y=lat)) +
theme_classic()
ggplot(data=mtc.caps, aes(x=lon, y=lat, fill='red')) +
geom_point() +
#facet_wrap(~as.factor(day(datetime))) +
geom_point(data=mtc.del.day, aes(x=lon, y=lat, fill='lightgrey')) +
theme_classic()
ggplot(data=mtc.caps, aes(x=lon, y=lat)) +
geom_point() +
facet_wrap(~as.factor(day(datetime))) +
geom_point(data=mtc.del.day, aes(x=lon, y=lat)) +
theme_classic()
ggplot(data=mtc.caps, aes(x=lon, y=lat)) +
geom_point(fill='red') +
facet_wrap(~as.factor(day(datetime))) +
geom_point(data=mtc.del.day, aes(x=lon, y=lat)) +
theme_classic()
ggplot(data=mtc.caps, aes(x=lon, y=lat)) +
geom_point(color='red') +
facet_wrap(~as.factor(day(datetime))) +
geom_point(data=mtc.del.day, aes(x=lon, y=lat)) +
theme_classic()
ggplot(data=mtc.caps, aes(x=lon, y=lat)) +
facet_wrap(~as.factor(day(datetime))) +
geom_point(data=mtc.del.day, aes(x=lon, y=lat)) +
geom_point(color='red') +
theme_classic()
ggplot(data=mtc.caps, aes(x=lon, y=lat, color=time)) +
facet_wrap(~as.factor(day(datetime))) +
geom_point(data=mtc.del.day, aes(x=lon, y=lat)) +
geom_point(color='red') +
theme_classic()
ggplot(data=mtc.caps %>% filter(day(datetime)=22), aes(x=lon, y=lat, color=time))
mtc.t %>% filter(day(datetime) == 22)
mtc.t %>% filter(day(datetime) == 22) %>%
ggplot(aes(x=lon, y=lat, color=in.range)) +
geom_point() +
theme_classic()
ggplot(data=mtc.t, aes(x=lon, y=lat, color=in.range)) +
geom_point() +
facet_wrap(~day(datetime)) +
theme_classic()
mtc.t %>% filter(del.day == TRUE) %>%
ggplot(aes(x=lon, y=lat, color=in.range)) +
geom_point() +
facet_wrap(~date) +
theme_classic()
mtc.t %>% filter(del.day == TRUE) %>%
write_csv('../data/interim/mtc_captures.csv')
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Load some libraries.
library('tidyverse')
library('lubridate')
# Import some data.
dt <- read_csv('../data/interim/camera_corrected.csv')
tl <- read_csv('../data/processed/telemetry_2018-2019.csv')
# Only 2 sites have both cameras and telemetry (so far): MTC and RLK.
rlk.t <- tl %>% filter(site == 'RLK')
rlk.c <- dt %>% filter(site == 'RLK' & interest == 'delivery')
mtc.c <- dt %>% filter(site == 'MTC' & interest == 'delivery')
mtc.t <- tl %>% filter(id == 'HAR09')
# Create a range starting two hours before the delivery.
mtc.c <- mtc.c %>% mutate(end=datetime - hours(1), start=datetime)
# Annotate telemetry points that fall within those ranges.
mtc.t$in.range <- mtc.t$datetime %in% unlist(Map(`:`, mtc.c$start, mtc.c$end))
mtc.caps <- mtc.t %>% filter(in.range == TRUE)
nrow(mtc.caps)
# On which days do I have telemetry data for a delivery?
mtc.cap.days <- mtc.caps %>% dplyr::select(date) %>%
distinct()
# Annotate all telemetry locations for those days.
mtc.t$del.day <- mtc.t$date %in% mtc.cap.days$date
mtc.t %>% filter(del.day == TRUE) %>%
write_csv('../data/interim/')
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Load some libraries.
library('tidyverse')
library('lubridate')
# Import some data.
dt <- read_csv('../data/interim/camera_corrected.csv')
tl <- read_csv('../data/processed/telemetry_2018-2019.csv')
# Only 2 sites have both cameras and telemetry (so far): MTC and RLK.
rlk.t <- tl %>% filter(site == 'RLK')
rlk.c <- dt %>% filter(site == 'RLK' & interest == 'delivery')
mtc.c <- dt %>% filter(site == 'MTC' & interest == 'delivery')
mtc.t <- tl %>% filter(id == 'HAR09')
# Create a range starting two hours before the delivery.
mtc.c <- mtc.c %>% mutate(end=datetime - hours(1), start=datetime)
# Annotate telemetry points that fall within those ranges.
mtc.t$in.range <- mtc.t$datetime %in% unlist(Map(`:`, mtc.c$start, mtc.c$end))
mtc.caps <- mtc.t %>% filter(in.range == TRUE)
nrow(mtc.caps)
# On which days do I have telemetry data for a delivery?
mtc.cap.days <- mtc.caps %>% dplyr::select(date) %>%
distinct()
# Annotate all telemetry locations for those days.
mtc.t$del.day <- mtc.t$date %in% mtc.cap.days$date
mtc.t %>% filter(del.day == TRUE) %>%
write_csv('../data/interim/')
mtc.t %>% filter(del.day == TRUE) %>%
ggplot(aes(x=lon, y=lat, color=in.range)) +
geom_point() +
facet_wrap(~date) +
theme_classic()
mtc.t %>% filter(del.day == TRUE) %>%
ggplot(aes(x=lon, y=lat)) +
geom_density() +
facet_wrap(~date) +
theme_classic()
mtc.t %>% filter(del.day == TRUE) %>%
ggplot(aes(x=lon, y=lat)) +
geom_density() +
facet_wrap(~date) +
theme_classic()
del.day <- mtc.t %>% filter(del.day == TRUE)
ggplot(del.day, aes(x=lon, y=lat)) +
geom_density() +
facet_wrap(~date) +
theme_classic()
calss(del.day$lon)
class(del.day$lon)
class(del.day$lat)
del.day$lat <- unlist(del.day$lat)
ggplot(del.day, aes(x=lon, y=lat)) +
geom_density() +
facet_wrap(~date) +
theme_classic()
ggplot(del.day) +
geom_density(aes(x=lon, y=lat)) +
facet_wrap(~date) +
theme_classic()
del.day <- mtc.t %>% filter(del.day == TRUE)
ggplot(del.day, aes(x=lon, y=lat)) +
geom_density(aes(x=lon, y=lat)) +
facet_wrap(~date) +
theme_classic()
View(del.day)
ggplot(del.day, aes(x=lon, y=lat)) +
geom_point(aes(x=lon, y=lat)) +
facet_wrap(~date) +
theme_classic()
ggplot(del.day, aes(x=lon, y=lat)) +
geom_contour() +
facet_wrap(~date) +
theme_classic()
ggplot(del.day, aes(x=lon, y=lat, z=density)) +
geom_contour() +
facet_wrap(~date) +
theme_classic()
ggplot(del.day, aes(x=lon, y=lat)) +
geom_density_2d() +
facet_wrap(~date) +
theme_classic()
ggplot(del.day, aes(x=lon, y=lat)) +
geom_density_2d(aes(group=in.range, color=in.range)) +
facet_wrap(~date) +
theme_classic()
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Load some libraries.
library('tidyverse')
library('lubridate')
# Import some data.
dt <- read_csv('../data/interim/camera_corrected.csv')
tl <- read_csv('../data/processed/telemetry_2018-2019.csv')
# Only 2 sites have both cameras and telemetry (so far): MTC and RLK.
rlk.t <- tl %>% filter(site == 'RLK')
rlk.c <- dt %>% filter(site == 'RLK' & interest == 'delivery')
mtc.c <- dt %>% filter(site == 'MTC' & interest == 'delivery')
mtc.t <- tl %>% filter(id == 'HAR09')
# Create a range starting two hours before the delivery.
mtc.c <- mtc.c %>% mutate(end=datetime - hours(1), start=datetime)
# Annotate telemetry points that fall within those ranges.
mtc.t$in.range <- mtc.t$datetime %in% unlist(Map(`:`, mtc.c$start, mtc.c$end))
mtc.caps <- mtc.t %>% filter(in.range == TRUE)
nrow(mtc.caps)
# On which days do I have telemetry data for a delivery?
mtc.cap.days <- mtc.caps %>% dplyr::select(date) %>%
distinct()
# Annotate all telemetry locations for those days.
mtc.t$del.day <- mtc.t$date %in% mtc.cap.days$date
#mtc.t %>% filter(del.day == TRUE) %>%
write_csv('../data/interim/')
# 10:55 is the probably capture event.
# Likely nest visit at 11:11.
# Another likely capture at 11:44, so I'll make that my cutoff.
visit2 <- interval(ymd_hms(20190613105500), ymd_hms(20190613114500))
# 10:55 is the probably capture event.
# Likely nest visit at 11:11.
# Another likely capture at 11:44, so I'll make that my cutoff.
visit2 <- interval(ymd_hms(20190613105500), ymd_hms(20190613114500))
mtc.c %>% filter(datetime %in% vist2)
mtc.c %>% filter(datetime %in% visit2)
dt %>% filter(site == 'MTC' & datetime %in% visit2)
dt %>% filter(site == 'MTC')
dt %>% filter(site == 'MTC') %>%
filter(datetime %within% c(ymd_hms(20190613105500), ymd_hms(20190613114500)))
dt %>% filter(site == 'MTC') %>%
filter(datetime %within% visit2)
View(dt)
visit3 <- interval(ymd_hms(20190613160000), ymd_hms(20190613170000))
dt %>% filter(site == 'MTC') %>%
filter(datetime %within% visit2)
dt %>% filter(site == 'MTC') %>%
filter(datetime %within% visit3)
View(mtc.caps)
View(mtc.c)
