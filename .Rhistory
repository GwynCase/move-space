vri %>%
filter(BCLCS_LV_4 == 'TC' & PROJ_AGE_1 <= 30)
mean(vri$PROJ_AGE_1, vri$PROJ_AGE_2)
vri$PROJ_AGE_2[1]
vri$PROJ_AGE_1[1]
c(vri$PROJ_AGE_1[1], vri$PROJ_AGE_2[1])
mean(c(vri$PROJ_AGE_1[1], vri$PROJ_AGE_2[1]))
mean(c(vri$PROJ_AGE_1, vri$PROJ_AGE_2))
rowMeans(subset(vri, select = c(PROJ_AGE_1, PROJ_AGE_2)), na.rm = TRUE)
vri %>%
dplyr::select(PROJ_AGE_1, PROJ_AGE_2)
vri %>%
dplyr::select(PROJ_AGE_1, PROJ_AGE_2) %>%
rowMeans()
classed <- vri %>%
mutate(age=mean()) %>%
mutate(class=case_when(
BCLCS_LV_2 == 'W' ~ 'WTR',
BCLCS_LV_4 == 'TB' ~ 'HWD',
BCLCS_LV_4 == 'TM' ~ 'HWD',
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 > 30  ~ 'CFT',
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 <= 30 ~ 'YFT',
BCLCS_LV_5 == 'UR' ~ 'URB',
TRUE ~ 'OPN'
))
classed <- vri %>%
mutate(class=case_when(
BCLCS_LV_2 == 'W' ~ 'WTR',
BCLCS_LV_4 == 'TB' ~ 'HWD',
BCLCS_LV_4 == 'TM' ~ 'HWD',
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 > 30  ~ 'CFT',
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 <= 30 ~ 'YFT',
BCLCS_LV_5 == 'UR' ~ 'URB',
TRUE ~ 'OPN'
))
plot(st_geometry(classed))
classed <- vri %>%
mutate(class=case_when(
BCLCS_LV_2 == 'W' ~ 'WTR',
BCLCS_LV_4 == 'TB' ~ 'HWD',
BCLCS_LV_4 == 'TM' ~ 'HWD',
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 <= 50 ~ 'YNG',
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 < 10 ~ 'BLK',
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 > 50  ~ 'MTR',
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 > 150 ~ 'OGR',
BCLCS_LV_5 == 'UR' ~ 'URB',
TRUE ~ 'OPN'
))
st_write(classed, '../data/intermin/classed.shp')
library('rgdal')
writeOGR(classed, '../data/intermin', 'classed', driver='ESRI shapefile')
writeOGR(classed, '../data/intermin', 'classed')
writeOGR(classed, '../data/intermin', 'classed', driver="ESRI Shapefile")
class(classed)
writeOGR(classed, '../data/intermin', 'classed', driver="ESRI Shapefile")
writeOGR(classed, '../data/intermin', 'classed.shp', driver="ESRI Shapefile")
writeOGR(classed, '../data/external/VRI/classed.shp', driver="ESRI Shapefile")
class(vri)
class(classed)
st_write(classed, '../data/external/VRI/classed.shp')
# Bring in some telemetry data.
tel.all <- readOGR('../data/processed/telem_all.csv')
# Bring in some telemetry data.
tel.all <- read.csv('../data/processed/telem_all.csv', stringsAsFactors=F)
# Bring in some telemetry data.
tel.all <- read.csv('../data/processed/telem_all.csv', stringsAsFactors=F)
# Pull out a toy to work with.
ska <- tel.all %>%
filter(site == 'SKA')
View(tel.all)
library('ggplot2')
ggplot(ska, aes(x=lon, y=lat)) +
geom_point()
# Pull out a toy to work with.
ska <- tel.all %>%
filter(site == 'SKA') %>%
drop_na(lat)
ggplot(ska, aes(x=lon, y=lat)) +
geom_point()
ggplot(ska, aes(x=lon, y=lat)) +
geom_point() +
theme_classic()
ggplot(ska, aes(x=lon, y=lat)) +
geom_point() +
theme_classic() +
geom_density_2d()
ggplot(ska, aes(x=lon, y=lat)) +
theme_classic() +
geom_density_2d()
ggplot(ska, aes(x=lon, y=lat)) +
theme_minimal() +
geom_density_2d()
ggplot(ska, aes(x=lon, y=lat)) +
theme_void() +
geom_density_2d()
ggplot(ska, aes(x=lon, y=lat)) +
theme_void() +
geom_point()
ggplot(ska, aes(x=lon, y=lat)) +
geom_point()
ggplot(ska, aes(x=lon, y=lat)) +
geom_point() +
theme_void()
ggplot(ska, aes(x=lon, y=lat)) +
geom_point()
library('lubridate')
View(ska)
library('suncalc')
ska$date <- ymd(ska$date)
ska$time <- hms(ska$time)
# Pull out a toy to work with.
ska <- tel.all %>%
filter(site == 'SKA') %>%
drop_na(lat)
ska$datetime <- ymd_hms(ska$time)
ska$date <- ymd(ska$date)
ska <-  getSunlightTimes(data=ska, keep=c('sunrise', 'sunset'),
tz='America/Vancouver')
ska %>%
mutate(dial=case_when(
datetime > sunrise & datetime < sunset ~ 'day',
TRUE ~ 'night'
))
ska <- ska %>%
mutate(dial=case_when(
datetime > sunrise & datetime < sunset ~ 'day',
TRUE ~ 'night'
))
# Pull out a toy to work with.
ska <- tel.all %>%
filter(site == 'SKA') %>%
drop_na(lat)
# Do the datetime thing.
ska$date <- ymd(ska$date)
ska$datetime <- ymd_hms(ska$datetime)
# Calculate sunrise and sunset times for each day.
ska <- getSunlightTimes(data=ska, keep=c('sunrise', 'sunset'),
tz='America/Vancouver')
ska <- ska %>%
mutate(dial=case_when(
datetime > sunrise & datetime < sunset ~ 'day',
TRUE ~ 'night'
))
ska <- ska %>%
mutate(dial=case_when(
datetime > sunset ~ 'night'
TRUE ~ 'day'
))
ska <- ska %>%
mutate(dial=case_when(
datetime > sunset ~ 'night',
TRUE ~ 'day'
))
class(ska$sunset)
class(ska$datetime)
ska <- ska %>%
mutate(dial=case_when(
datetime < sunset ~ 'day',
TRUE ~ 'night'
))
ska$diff.rise <- as.numeric(difftime(ska$datetime, ska$sunrise, units='hours'))
ska$diff.set <- as.numeric(difftime(ska$time, ska$sunset, units='hours'))
ska$diff.set <- as.numeric(difftime(ska$datetime, ska$sunset, units='hours'))
ska$dial <- case_when(
df$diff.rise >= 0 & df$diff.set <= 0 ~ 'day',
TRUE ~ 'night'
)
ska$dial <- case_when(
ska$diff.rise >= 0 & ska$diff.set <= 0 ~ 'day',
TRUE ~ 'night'
)
tib <- ska %>%
dply::select(datetime, sunrise, sunset)
tib <- ska %>%
dplyr::select(datetime, sunrise, sunset)
View(tib)
class(tib$datetime)
class(tib$sunrise)
class(tib$sunset)
interval(tib$sunrise[1], tib$sunset[1])
tib %>%
mutate(int=interval(sunrise, sunset))
tib <- tib %>%
mutate(int=interval(sunrise, sunset))
tib %>%
mutate(dial=case_when(
datetime %within% int ~ 'day'
TRUE ~ 'night'
))
tib %>%
mutate(dial=case_when(
datetime %within% int ~ 'day',
TRUE ~ 'night'
))
tib <- tib %>%
mutate(dial=case_when(
datetime %within% int ~ 'day',
TRUE ~ 'night'
))
tib <- ska %>%
dplyr::select(datetime, sunrise, sunset) %>%
force_tz(datetime, tz='America/Vancouver')
View(ska)
tib <- tib %>%
mutate(int=interval(sunrise, sunset))
tib <- tib %>%
mutate(dial=case_when(
datetime %within% int ~ 'day',
TRUE ~ 'night'
))
# Pull out a toy to work with.
ska <- tel.all %>%
filter(site == 'SKA') %>%
drop_na(lat)
# Do the datetime thing.
ska$date <- ymd(ska$date)
ska$datetime <- ymd_hms(ska$datetime, tz='America/Vancouver')
# Calculate sunrise and sunset times for each day.
ska <- getSunlightTimes(data=ska, keep=c('sunrise', 'sunset'),
tz='America/Vancouver')
ska <- ska %>%
mutate(dial=case_when(
datetime < sunset & datetime > sunrise ~ 'day',
TRUE ~ 'night'
))
View(ska)
# Classify points as either daytime or nighttime.
ska.night <- ska %>%
filter(datetime < sunset & datetime > sunrise)
ggplot(ska.night, aes(x=lon, y=lat)) +
theme_void() +
geom_density_2d()
ggplot(ska, aes(x=lon, y=lat)) +
theme_void() +
geom_density_2d()
ggplot(ska.night, aes(x=lon, y=lat)) +
geom_point()
ggplot(ska.night, aes(x=lon, y=lat)) +
geom_point()
# Pull out the nighttime points.
ska.night <- ska %>%
filter(!datetime < sunset & datetime > sunrise)
ggplot(ska.night, aes(x=lon, y=lat)) +
geom_point()
View(ska)
ska.night %>%
group_by(date)
ska.night %>%
group_by(date) %>%
summarize(mean(lat))
View(ska.night)
# Pull out the nighttime points.
ska <- ska %>%
mutate(dial=case_when(
datetime < sunset & datetime > sunrise ~ 'day',
TRUE ~ 'night'
))
View(ska)
ska.night <- ska %>%
filter(dial == 'night')
ggplot(ska.night, aes(x=lon, y=lat)) +
geom_point()
View(ska.night)
ska.night <- ska.night %>%
mutate(day=round_date(datetime, unit='day'))
ggplot(ska.night, aes(x=lon, y=lat, color=day)) +
geom_point()
ska.night %>%
group_by(day) %>%
summarize(mean(lat))
ska.night %>%
group_by(day) %>%
summarize(mean(lat, lon))
ska.night %>%
group_by(day) %>%
summarize(mean(lat), mean(lon))
ska.night %>%
group_by(day) %>%
summarize(m.lat=mean(lat), m.lon=mean(lon))
centroids <- ska.night %>%
group_by(day) %>%
summarize(m.lat=mean(lat), m.lon=mean(lon))
View(centroids)
ggplot(centroids, aes(x=lon, y=lat)) +
geom_point()
ggplot(centroids, aes(x=m.lon, y=m.lat)) +
geom_point()
ggplot(centroids, aes(x=m.lon, y=m.lat)) +
geom_point() +
geom_density_2d()
# Take a look.
ggplot(centroids, aes(x=m.lon, y=m.lat)) +
theme_void() +
geom_density_2d()
# Take a look.
ggplot(ska.night, aes(x=lon, y=lat)) +
theme_void() +
geom_density_2d()
# Take a look.
ggplot(centroids, aes(x=m.lon, y=m.lat)) +
theme_void() +
geom_density_2d()
ggplot(centroids, aes(x=m.lon, y=m.lat)) +
geom_point()
write.csv(centroids, '../data/interim/roost_centroids_ska.csv', row.names=FALSE)
library('tidyverse')
library('exiftoolr')
library('lubridate')
library('purrr')
# Fill in these three things:
# Where are the pictures now?
path.in <- 'D:/RECONYX/Turbid/100RECNX_Turbid/'
# What site is it?
site <- 'TCR'
# Where are the pictures going?
# END WITH A FORWARD SLASH
path.out <- 'E:/'
# Make a new directory for the files.
site.dir <- paste0(path.out, site)
dir.create(site.dir)
# Get a list of the photos.
photo.list <- list.files(path.in, full.names=TRUE) %>%
exif_read(tags=c('filename', 'CreateDate', 'SerialNumber'))
# Create a data frame.
photo.df <- photo.list %>%
dplyr::select(filename=FileName, datetime=CreateDate,
serial=SerialNumber) %>%
mutate(site=site, datetime=ymd_hms(datetime)) %>%
add_column(interest='', live.chicks='', class='', family='',
genus='', species='', common='', size='', comments='')
# Save a csv with all the photos.
write.csv(photo.df,
file=paste0(site.dir, '/', site, '_photos_all.csv'),
row.names=FALSE)
# Add a week column.
photo.df <- photo.df %>%
mutate(week=week(datetime), week=paste0('week_', week))
# Nest the data frame.
photo.nest <- photo.df %>% group_nest(week)
# Split the data frame by week and save as separate csvs.
walk2(photo.nest$week, photo.nest$data, function(week, data) {
path <-  paste0(site.dir, '/', week, '/', site, '_photos_', week, '.csv')
dir.create(dirname(path), recursive=TRUE, showWarning=FALSE)
write.csv(data, file=path, row.names=FALSE)
})
# Copy the photos into the appropriate directories.
walk2(photo.df$week, photo.df$filename, function(week, filename) {
target <-  paste0(site.dir, '/', week, '/', filename)
source <- file.path(path.in, filename)
file.copy(source, target)
})
# Fill in these three things:
# Where are the pictures now?
path.in <- 'D:/RECONYX/Turbid/101RECNX_Turbid/'
# What site is it?
site <- 'TCR2'
# Where are the pictures going?
# END WITH A FORWARD SLASH
path.out <- 'E:/'
# Make a new directory for the files.
site.dir <- paste0(path.out, site)
# Get a list of the photos.
photo.list <- list.files(path.in, full.names=TRUE) %>%
exif_read(tags=c('filename', 'CreateDate', 'SerialNumber'))
# Create a data frame.
photo.df <- photo.list %>%
dplyr::select(filename=FileName, datetime=CreateDate,
serial=SerialNumber) %>%
mutate(site=site, datetime=ymd_hms(datetime)) %>%
add_column(interest='', live.chicks='', class='', family='',
genus='', species='', common='', size='', comments='')
# Save a csv with all the photos.
write.csv(photo.df,
file=paste0(site.dir, '/', site, '_photos_all.csv'),
row.names=FALSE)
# Add a week column.
photo.df <- photo.df %>%
mutate(week=week(datetime), week=paste0('week_', week))
# Nest the data frame.
photo.nest <- photo.df %>% group_nest(week)
# Split the data frame by week and save as separate csvs.
walk2(photo.nest$week, photo.nest$data, function(week, data) {
path <-  paste0(site.dir, '/', week, '/', site, '_photos_', week, '.csv')
dir.create(dirname(path), recursive=TRUE, showWarning=FALSE)
write.csv(data, file=path, row.names=FALSE)
})
# Copy the photos into the appropriate directories.
walk2(photo.df$week, photo.df$filename, function(week, filename) {
target <-  paste0(site.dir, '/', week, '/', filename)
source <- file.path(path.in, filename)
file.copy(source, target)
})
# Fill in these three things:
# Where are the pictures now?
path.in <- 'D:/RECONYX/Turbid/102RECNX_Turbid/'
# What site is it?
site <- 'TCR3'
# Where are the pictures going?
# END WITH A FORWARD SLASH
path.out <- 'E:/'
# Make a new directory for the files.
site.dir <- paste0(path.out, site)
dir.create(site.dir)
# Get a list of the photos.
photo.list <- list.files(path.in, full.names=TRUE) %>%
exif_read(tags=c('filename', 'CreateDate', 'SerialNumber'))
# Create a data frame.
photo.df <- photo.list %>%
dplyr::select(filename=FileName, datetime=CreateDate,
serial=SerialNumber) %>%
mutate(site=site, datetime=ymd_hms(datetime)) %>%
add_column(interest='', live.chicks='', class='', family='',
genus='', species='', common='', size='', comments='')
# Save a csv with all the photos.
write.csv(photo.df,
file=paste0(site.dir, '/', site, '_photos_all.csv'),
row.names=FALSE)
# Add a week column.
photo.df <- photo.df %>%
mutate(week=week(datetime), week=paste0('week_', week))
# Nest the data frame.
photo.nest <- photo.df %>% group_nest(week)
# Split the data frame by week and save as separate csvs.
walk2(photo.nest$week, photo.nest$data, function(week, data) {
path <-  paste0(site.dir, '/', week, '/', site, '_photos_', week, '.csv')
dir.create(dirname(path), recursive=TRUE, showWarning=FALSE)
write.csv(data, file=path, row.names=FALSE)
})
# Copy the photos into the appropriate directories.
walk2(photo.df$week, photo.df$filename, function(week, filename) {
target <-  paste0(site.dir, '/', week, '/', filename)
source <- file.path(path.in, filename)
file.copy(source, target)
})
# Load some libraries.
library('tidyverse')
library('lubridate')
vi.2018 <- read.csv('../data/external/VI_surveydata_2018.csv',
header=TRUE, stringsAsFactors=FALSE)
colnames(vi.2018)
# The first column has a strange name, fix that.
vi.2018 <- rename(vi.2018, SiteName=1)
# Select only observations of nests.
vi.nest.assess.2018 <- vi.2018 %>%
filter(NestAssess == 'Yes')
nrow(vi.nest.assess.2018)
n_distinct(vi.nest.assess.2018$SiteName)
# List sites at which nest assessments were conducted.
distinct(vi.nest.assess.2018, SiteName)
# Which ones had active nests?
vi.nest.assess.2018 %>% dplyr::select(SiteName, NestStatus) %>%
filter(NestStatus == 'Active')
# Load 2019 data.
vi.2019 <- read.csv('../data/external/VI_surveydata_2019.csv',
header=TRUE, stringsAsFactors=FALSE)
colnames(vi.2019)
# Also has weird first column name.
vi.2019 <- rename(vi.2019, SiteName=1)
# Problem... different variable names.
vi.2019 %>% group_by(Nest.Assessment) %>%
summarize(n())
# Select only observations of nests.
vi.nest.assess.2019 <- vi.2019 %>% filter(Nest.Status != "")
# List sites at which nest assessments were conducted.
distinct(vi.nest.assess.2019, SiteName)
# Which ones had active nests?
vi.nest.assess.2019 %>% dplyr::select(SiteName, Nest.Status) %>%
filter(Nest.Status == 'Active')
sites.b <- intersect(vi.nest.assess.2018$SiteName,
vi.nest.assess.2019$SiteName)
sites.b
voucher.2019 <- vi.2019 %>% filter(Sign.Type %in% c('RP', 'DC')) %>%
distinct(vi.2019, SiteName)
voucher.2018 <- vi.2018 %>% filter(SignType == 'FE') %>%
distinct(vi.2019, SiteName)
voucher.sites <- bind_rows(voucher.2019, voucher.2018, .id='year')
voucher.sites
nest.assess <- union(vi.nest.assess.2018$SiteName,
vi.nest.assess.2019$SiteName)
setdiff(voucher.sites$SiteName, nest.assess)
sites.2019 <- vi.2019 %>% filter(Nest.Status != "") %>%
mutate(a.2019=case_when(Nest.Status == 'Active' ~ 1,
TRUE ~ 0)) %>%
mutate(v.2019=case_when(Sign.Type %in% c('RP', 'DC', 'CR', 'RP') ~ 1,
TRUE ~ 0)) %>%
group_by(SiteName) %>%
summarise(a.2019=max(a.2019), v.2019=max(v.2019)) %>%
dplyr::select(SiteName, a.2019, v.2019)
sites.2018 <- vi.2018 %>% filter(NestStatus != "") %>%
mutate(a.2018=case_when(NestStatus == 'Active' ~ 1,
TRUE ~ 0)) %>%
mutate(v.2018=case_when(SignType %in% c('RP', 'DC', 'CR', 'RP') ~ 1,
TRUE ~ 0)) %>%
group_by(SiteName) %>%
summarise(a.2018=max(a.2018), v.2018=max(v.2018)) %>%
dplyr::select(SiteName, a.2018, v.2018)
sites <- bind_rows(sites.2018, sites.2019) %>%
group_by(SiteName) %>%
summarise(a.2018=max(a.2018), v.2018=max(v.2018),
a.2019=max(a.2019), v.2019=max(v.2019)) %>%
replace_na(list(a.2018=NA, v.2018=0, a.2019=NA, v.2019=0))
View(sites)
sites2 <- distinct(sites)
View(sites2)
sites2 <- trimws(sites)
sites2 <- distinct(sites)
sites[1, ]
sites2 <- sites[-1, ]
View(sites2)
sites2 <- sites[-(1), ]
write.csv(sites, '../data/interim/VI_sites')
write.csv(sites, '../data/interim/VI_sites.csv')
