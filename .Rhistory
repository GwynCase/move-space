geom_histogram(binwidth=86400) +
theme_classic() +
scale_fill_brewer(palette='BrBG')
ggplot(delivery, aes(x=datetime)) +
geom_histogram(binwidth=86400,color=white) +
theme_classic() +
g
ggplot(delivery, aes(x=datetime)) +
geom_histogram(binwidth=86400, color='white') +
theme_classic()
ggplot(delivery, aes(x=datetime)) +
geom_histogram(binwidth=86400, color='white') +
theme_classic() +
xlab('Date') + ylab('No. of individuals delivered') +
ggtitle('Frequency of prey deliveries at TMC')
delivery$datetime <- ymd_hms(delivery$datetime)
ggplot(delivery, aes(x=datetime)) +
geom_histogram(binwidth=86400, color='white') +
theme_classic() +
xlab('Date') + ylab('No. of individuals delivered') +
ggtitle('Frequency of prey deliveries at TMC')
delivery$datetime <- ymd_hms(delivery$datetime)
ggplot(delivery, aes(x=datetime)) +
geom_histogram(binwidth=86400, color='white') +
theme_classic() +
xlab('Date') + ylab('No. of individuals delivered') +
ggtitle('Frequency of prey deliveries at TMC')
View(df)
df %>%
filter(live.chick != '')
df %>%
filter(live.chicks != '')
df %>%
filter(live.chicks != '') %>%
splr::select(datetime, live.chicks, comments)
df %>%
filter(live.chicks != '') %>%
dplyr::select(datetime, live.chicks, comments)
df %>%
filter(live.chicks != '') %>%
dplyr::select(datetime, live.chicks, comments) %>%
filter(3:5)
df %>%
filter(live.chicks != '') %>%
dplyr::select(datetime, live.chicks, comments) %>%
filter(row_number() %in% 3:5)
mort <- df %>%
filter(live.chicks != '') %>%
dplyr::select(datetime, live.chicks, comments) %>%
filter(row_number() %in% 3:5)
View(mort)
mort$datetime[1]
class(mort$datetime[1])
ymd_hms(mort$datetime[1])
mort$datetime <- ymd_hms(mort$datetime)
ggplot(delivery, aes(x=datetime)) +
geom_histogram(binwidth=86400, color='white') +
theme_classic() +
xlab('Date') + ylab('No. of individuals delivered') +
ggtitle('Frequency of prey deliveries at TMC') +
geom_vline(mort$datetime)
ggplot(delivery, aes(x=datetime)) +
geom_histogram(binwidth=86400, color='white') +
theme_classic() +
xlab('Date') + ylab('No. of individuals delivered') +
ggtitle('Frequency of prey deliveries at TMC') +
geom_vline(1:5)
ggplot(delivery, aes(x=datetime)) +
geom_histogram(binwidth=86400, color='white') +
theme_classic() +
xlab('Date') + ylab('No. of individuals delivered') +
ggtitle('Frequency of prey deliveries at TMC')
first <- mort$datetime[1]
class(first)
ggplot(delivery, aes(x=datetime)) +
geom_histogram(binwidth=86400, color='white') +
theme_classic() +
xlab('Date') + ylab('No. of individuals delivered') +
ggtitle('Frequency of prey deliveries at TMC') +
vline(first)
ggplot(delivery, aes(x=datetime)) +
geom_histogram(binwidth=86400, color='white') +
theme_classic() +
xlab('Date') + ylab('No. of individuals delivered') +
ggtitle('Frequency of prey deliveries at TMC') +
geom_vline(first)
ggplot(mtcars, aes(wt, mpg)) + geom_point()
ggplot(delivery, aes(x=datetime)) +
geom_histogram(binwidth=86400, color='white') +
theme_classic() +
xlab('Date') + ylab('No. of individuals delivered') +
ggtitle('Frequency of prey deliveries at TMC') +
geom_vline(xintercept=first)
ggplot(delivery, aes(x=datetime)) +
geom_histogram(binwidth=86400, color='white') +
theme_classic() +
xlab('Date') + ylab('No. of individuals delivered') +
ggtitle('Frequency of prey deliveries at TMC') +
geom_vline(xintercept=mort$datetime)
mort <- df %>%
filter(live.chicks != '') %>%
dplyr::select(datetime, live.chicks, comments) %>%
filter(row_number() %in% 3:5) %>%
ymd_hms(datetime)
mort <- df %>%
filter(live.chicks != '') %>%
dplyr::select(datetime, live.chicks, comments) %>%
filter(row_number() %in% 3:5)
ggplot(delivery, aes(x=datetime)) +
geom_histogram(binwidth=86400, color='white') +
theme_classic() +
xlab('Date') + ylab('No. of individuals delivered') +
ggtitle('Frequency of prey deliveries at TMC') +
geom_vline(xintercept=ymd_hms(mort$datetime))
mort <- df %>%
filter(live.chicks != '') %>%
dplyr::select(datetime, live.chicks, comments) %>%
filter(row_number() %in% 3:5)
ggplot(delivery, aes(x=datetime)) +
geom_histogram(binwidth=86400, color='white') +
theme_classic() +
xlab('Date') + ylab('No. of individuals delivered') +
ggtitle('Frequency of prey deliveries at TMC') +
geom_vline(xintercept=ymd_hms(mort$datetime))
mort <- df %>%
filter(live.chicks != '') %>%
dplyr::select(datetime, live.chicks, comments) %>%
filter(row_number() %in% 3:5)
delivery$datetime <- ymd_hms(delivery$datetime)
ggplot(delivery, aes(x=datetime)) +
geom_histogram(binwidth=86400, color='white') +
theme_classic() +
xlab('Date') + ylab('No. of individuals delivered') +
ggtitle('Frequency of prey deliveries at TMC') +
geom_vline(xintercept=ymd_hms(mort$datetime))
ggplot(delivery, aes(x=datetime)) +
geom_histogram(binwidth=86400, color='white') +
theme_classic() +
xlab('Date') + ylab('No. of individuals delivered') +
ggtitle('Frequency of prey deliveries at TMC') +
geom_vline(xintercept=ymd_hms(mort$datetime))
setwd("../src/RST_code)
setwd('../src/RST_code')
# Load functions from external files.
# dyn.load("RST_residenceRadii.so") # if using a mac
# Load functions from external files.
# dyn.load("RST_residenceRadii.so") # if using a mac
dyn.load("RST_residenceRadii.dll") # if using Windows
# Load functions from external files.
# dyn.load("RST_residenceRadii.so") # if using a mac
dyn.load("../src/RST_code/RST_residenceRadii.dll") # if using Windows
# Load functions from external files.
# dyn.load("RST_residenceRadii.so") # if using a mac
dyn.load("..src/RST_code/RST_residenceRadii.dll") # if using Windows
# Load functions from external files.
# dyn.load("RST_residenceRadii.so") # if using a mac
dyn.load("../src/RST_code/RST_residenceRadii.dll") # if using Windows
source("RST_functions_all.R")
# Load functions from external files.
# dyn.load("RST_residenceRadii.so") # if using a mac
dyn.load("../src/RST_code/RST_residenceRadii.dll") # if using Windows
plot(cars)
library('cartography')
install.packages(cartography)
install.packages("cartography")
# Load in some libraries.
library('cartography')
library('sf')
# Import VRI shapefile.
vri <- st_read('../data/external/VRI/VEG_R1_PLY_polygons.shp')
file.exsits('../data/external/VRI/VEG_R1_PLY_polygons.shp')
file.exists('../data/external/VRI/VEG_R1_PLY_polygons.shp')
file.exists('../data/external/VRI/VEG_R1_PLY_polygon.shp')
# Import VRI shapefile.
vri <- st_read('../data/external/VRI/VEG_R1_PLY_polygons.shp')
# Import VRI shapefile.
vri <- st_read('../data/external/VRI/VEG_R1_PLY_polygon.shp')
View(vri)
classed <- vri %>%
mutate(class=case_when(
BCLCS_LV_2 == 'W' ~ 'WTR',
BCLCS_LV_4 == 'TB' ~ 'HWD',
BCLCS_LV_4 == 'TM' ~ 'HWD',
BCLCS_LV_4 == 'TC' ~ 'CFT',
TRUE ~ 'OPN'
))
library('tidyverse')
classed <- vri %>%
mutate(class=case_when(
BCLCS_LV_2 == 'W' ~ 'WTR',
BCLCS_LV_4 == 'TB' ~ 'HWD',
BCLCS_LV_4 == 'TM' ~ 'HWD',
BCLCS_LV_4 == 'TC' ~ 'CFT',
TRUE ~ 'OPN'
))
View(classed)
classed %>%
case_when(
class == 'CFT' & PROJ_AGE_1 <= 30 ~ 'YFT'
TRUE ~ class
classed %>%
case_when(
class == 'CFT' & PROJ_AGE_1 <= 30 ~ 'YFT',
TRUE ~ class
)
vri %>%
filter(BCLCS_LV_4 == 'TC' & PROJ_AGE_1 < 30)
vri %>%
filter(BCLCS_LV_4 == 'TC' & PROJ_AGE_1 <= 30)
mean(vri$PROJ_AGE_1, vri$PROJ_AGE_2)
vri$PROJ_AGE_2[1]
vri$PROJ_AGE_1[1]
c(vri$PROJ_AGE_1[1], vri$PROJ_AGE_2[1])
mean(c(vri$PROJ_AGE_1[1], vri$PROJ_AGE_2[1]))
mean(c(vri$PROJ_AGE_1, vri$PROJ_AGE_2))
rowMeans(subset(vri, select = c(PROJ_AGE_1, PROJ_AGE_2)), na.rm = TRUE)
vri %>%
dplyr::select(PROJ_AGE_1, PROJ_AGE_2)
vri %>%
dplyr::select(PROJ_AGE_1, PROJ_AGE_2) %>%
rowMeans()
classed <- vri %>%
mutate(age=mean()) %>%
mutate(class=case_when(
BCLCS_LV_2 == 'W' ~ 'WTR',
BCLCS_LV_4 == 'TB' ~ 'HWD',
BCLCS_LV_4 == 'TM' ~ 'HWD',
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 > 30  ~ 'CFT',
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 <= 30 ~ 'YFT',
BCLCS_LV_5 == 'UR' ~ 'URB',
TRUE ~ 'OPN'
))
classed <- vri %>%
mutate(class=case_when(
BCLCS_LV_2 == 'W' ~ 'WTR',
BCLCS_LV_4 == 'TB' ~ 'HWD',
BCLCS_LV_4 == 'TM' ~ 'HWD',
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 > 30  ~ 'CFT',
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 <= 30 ~ 'YFT',
BCLCS_LV_5 == 'UR' ~ 'URB',
TRUE ~ 'OPN'
))
plot(st_geometry(classed))
classed <- vri %>%
mutate(class=case_when(
BCLCS_LV_2 == 'W' ~ 'WTR',
BCLCS_LV_4 == 'TB' ~ 'HWD',
BCLCS_LV_4 == 'TM' ~ 'HWD',
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 <= 50 ~ 'YNG',
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 < 10 ~ 'BLK',
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 > 50  ~ 'MTR',
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 > 150 ~ 'OGR',
BCLCS_LV_5 == 'UR' ~ 'URB',
TRUE ~ 'OPN'
))
st_write(classed, '../data/intermin/classed.shp')
library('rgdal')
writeOGR(classed, '../data/intermin', 'classed', driver='ESRI shapefile')
writeOGR(classed, '../data/intermin', 'classed')
writeOGR(classed, '../data/intermin', 'classed', driver="ESRI Shapefile")
class(classed)
writeOGR(classed, '../data/intermin', 'classed', driver="ESRI Shapefile")
writeOGR(classed, '../data/intermin', 'classed.shp', driver="ESRI Shapefile")
writeOGR(classed, '../data/external/VRI/classed.shp', driver="ESRI Shapefile")
class(vri)
class(classed)
st_write(classed, '../data/external/VRI/classed.shp')
# Bring in some telemetry data.
tel.all <- readOGR('../data/processed/telem_all.csv')
# Bring in some telemetry data.
tel.all <- read.csv('../data/processed/telem_all.csv', stringsAsFactors=F)
# Bring in some telemetry data.
tel.all <- read.csv('../data/processed/telem_all.csv', stringsAsFactors=F)
# Pull out a toy to work with.
ska <- tel.all %>%
filter(site == 'SKA')
View(tel.all)
library('ggplot2')
ggplot(ska, aes(x=lon, y=lat)) +
geom_point()
# Pull out a toy to work with.
ska <- tel.all %>%
filter(site == 'SKA') %>%
drop_na(lat)
ggplot(ska, aes(x=lon, y=lat)) +
geom_point()
ggplot(ska, aes(x=lon, y=lat)) +
geom_point() +
theme_classic()
ggplot(ska, aes(x=lon, y=lat)) +
geom_point() +
theme_classic() +
geom_density_2d()
ggplot(ska, aes(x=lon, y=lat)) +
theme_classic() +
geom_density_2d()
ggplot(ska, aes(x=lon, y=lat)) +
theme_minimal() +
geom_density_2d()
ggplot(ska, aes(x=lon, y=lat)) +
theme_void() +
geom_density_2d()
ggplot(ska, aes(x=lon, y=lat)) +
theme_void() +
geom_point()
ggplot(ska, aes(x=lon, y=lat)) +
geom_point()
ggplot(ska, aes(x=lon, y=lat)) +
geom_point() +
theme_void()
ggplot(ska, aes(x=lon, y=lat)) +
geom_point()
library('lubridate')
View(ska)
library('suncalc')
ska$date <- ymd(ska$date)
ska$time <- hms(ska$time)
# Pull out a toy to work with.
ska <- tel.all %>%
filter(site == 'SKA') %>%
drop_na(lat)
ska$datetime <- ymd_hms(ska$time)
ska$date <- ymd(ska$date)
ska <-  getSunlightTimes(data=ska, keep=c('sunrise', 'sunset'),
tz='America/Vancouver')
ska %>%
mutate(dial=case_when(
datetime > sunrise & datetime < sunset ~ 'day',
TRUE ~ 'night'
))
ska <- ska %>%
mutate(dial=case_when(
datetime > sunrise & datetime < sunset ~ 'day',
TRUE ~ 'night'
))
# Pull out a toy to work with.
ska <- tel.all %>%
filter(site == 'SKA') %>%
drop_na(lat)
# Do the datetime thing.
ska$date <- ymd(ska$date)
ska$datetime <- ymd_hms(ska$datetime)
# Calculate sunrise and sunset times for each day.
ska <- getSunlightTimes(data=ska, keep=c('sunrise', 'sunset'),
tz='America/Vancouver')
ska <- ska %>%
mutate(dial=case_when(
datetime > sunrise & datetime < sunset ~ 'day',
TRUE ~ 'night'
))
ska <- ska %>%
mutate(dial=case_when(
datetime > sunset ~ 'night'
TRUE ~ 'day'
))
ska <- ska %>%
mutate(dial=case_when(
datetime > sunset ~ 'night',
TRUE ~ 'day'
))
class(ska$sunset)
class(ska$datetime)
ska <- ska %>%
mutate(dial=case_when(
datetime < sunset ~ 'day',
TRUE ~ 'night'
))
ska$diff.rise <- as.numeric(difftime(ska$datetime, ska$sunrise, units='hours'))
ska$diff.set <- as.numeric(difftime(ska$time, ska$sunset, units='hours'))
ska$diff.set <- as.numeric(difftime(ska$datetime, ska$sunset, units='hours'))
ska$dial <- case_when(
df$diff.rise >= 0 & df$diff.set <= 0 ~ 'day',
TRUE ~ 'night'
)
ska$dial <- case_when(
ska$diff.rise >= 0 & ska$diff.set <= 0 ~ 'day',
TRUE ~ 'night'
)
tib <- ska %>%
dply::select(datetime, sunrise, sunset)
tib <- ska %>%
dplyr::select(datetime, sunrise, sunset)
View(tib)
class(tib$datetime)
class(tib$sunrise)
class(tib$sunset)
interval(tib$sunrise[1], tib$sunset[1])
tib %>%
mutate(int=interval(sunrise, sunset))
tib <- tib %>%
mutate(int=interval(sunrise, sunset))
tib %>%
mutate(dial=case_when(
datetime %within% int ~ 'day'
TRUE ~ 'night'
))
tib %>%
mutate(dial=case_when(
datetime %within% int ~ 'day',
TRUE ~ 'night'
))
tib <- tib %>%
mutate(dial=case_when(
datetime %within% int ~ 'day',
TRUE ~ 'night'
))
tib <- ska %>%
dplyr::select(datetime, sunrise, sunset) %>%
force_tz(datetime, tz='America/Vancouver')
View(ska)
tib <- tib %>%
mutate(int=interval(sunrise, sunset))
tib <- tib %>%
mutate(dial=case_when(
datetime %within% int ~ 'day',
TRUE ~ 'night'
))
# Pull out a toy to work with.
ska <- tel.all %>%
filter(site == 'SKA') %>%
drop_na(lat)
# Do the datetime thing.
ska$date <- ymd(ska$date)
ska$datetime <- ymd_hms(ska$datetime, tz='America/Vancouver')
# Calculate sunrise and sunset times for each day.
ska <- getSunlightTimes(data=ska, keep=c('sunrise', 'sunset'),
tz='America/Vancouver')
ska <- ska %>%
mutate(dial=case_when(
datetime < sunset & datetime > sunrise ~ 'day',
TRUE ~ 'night'
))
View(ska)
# Classify points as either daytime or nighttime.
ska.night <- ska %>%
filter(datetime < sunset & datetime > sunrise)
ggplot(ska.night, aes(x=lon, y=lat)) +
theme_void() +
geom_density_2d()
ggplot(ska, aes(x=lon, y=lat)) +
theme_void() +
geom_density_2d()
ggplot(ska.night, aes(x=lon, y=lat)) +
geom_point()
ggplot(ska.night, aes(x=lon, y=lat)) +
geom_point()
# Pull out the nighttime points.
ska.night <- ska %>%
filter(!datetime < sunset & datetime > sunrise)
ggplot(ska.night, aes(x=lon, y=lat)) +
geom_point()
View(ska)
ska.night %>%
group_by(date)
ska.night %>%
group_by(date) %>%
summarize(mean(lat))
View(ska.night)
# Pull out the nighttime points.
ska <- ska %>%
mutate(dial=case_when(
datetime < sunset & datetime > sunrise ~ 'day',
TRUE ~ 'night'
))
View(ska)
ska.night <- ska %>%
filter(dial == 'night')
ggplot(ska.night, aes(x=lon, y=lat)) +
geom_point()
View(ska.night)
ska.night <- ska.night %>%
mutate(day=round_date(datetime, unit='day'))
ggplot(ska.night, aes(x=lon, y=lat, color=day)) +
geom_point()
ska.night %>%
group_by(day) %>%
summarize(mean(lat))
ska.night %>%
group_by(day) %>%
summarize(mean(lat, lon))
ska.night %>%
group_by(day) %>%
summarize(mean(lat), mean(lon))
ska.night %>%
group_by(day) %>%
summarize(m.lat=mean(lat), m.lon=mean(lon))
centroids <- ska.night %>%
group_by(day) %>%
summarize(m.lat=mean(lat), m.lon=mean(lon))
View(centroids)
ggplot(centroids, aes(x=lon, y=lat)) +
geom_point()
ggplot(centroids, aes(x=m.lon, y=m.lat)) +
geom_point()
ggplot(centroids, aes(x=m.lon, y=m.lat)) +
geom_point() +
geom_density_2d()
# Take a look.
ggplot(centroids, aes(x=m.lon, y=m.lat)) +
theme_void() +
geom_density_2d()
# Take a look.
ggplot(ska.night, aes(x=lon, y=lat)) +
theme_void() +
geom_density_2d()
# Take a look.
ggplot(centroids, aes(x=m.lon, y=m.lat)) +
theme_void() +
geom_density_2d()
ggplot(centroids, aes(x=m.lon, y=m.lat)) +
geom_point()
write.csv(centroids, '../data/interim/roost_centroids_ska.csv', row.names=FALSE)
