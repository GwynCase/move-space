foraging.stats %>% drop_na(timeSinceLastVisit) %>%
ggplot(aes(x=timeSinceLastVisit)) +
geom_density() +
geom_jitter() +
theme_classic()
foraging.stats %>% drop_na(timeSinceLastVisit) %>%
ggplot(aes(x=timeSinceLastVisit)) +
geom_density() +
theme_classic()
# Make a buffer around the nests.
nest.buffer <- st_buffer(nests, dist=150)
# Pull out just RLK.
rlk.buffer <- filter(nest.buffer, site == 'RLK' & year == 2019)
# Find the difference with the telemetry points.
rlk.foraging <- st_difference(rlk.sf, rlk.buffer)
# Do the annoying data frame thing again.
rlk.foraging.c <- rlk.foraging %>% mutate(xcoord = unlist(map(rlk.foraging$geometry,1)),
ycoord = unlist(map(rlk.foraging$geometry,2))) %>%
data.frame() %>%
select(xcoord, ycoord, datetime, id)
# Calculate revisits, using 150m.
foraging.visits <- getRecursions(rlk.foraging.c, 150)
# And plot.
plot(foraging.visits, rlk.foraging.c, axes=FALSE)
# And plot.
plot(foraging.visits, rlk.foraging.c, axes=FALSE)
foraging.stats %>% drop_na(timeSinceLastVisit) %>%
ggplot(aes(x=timeSinceLastVisit)) +
geom_density() +
theme_classic()
foraging.stats %>% drop_na(timeSinceLastVisit) %>%
ggplot(aes(x=timeSinceLastVisit)) +
geom_density() +
theme_classic()
foraging.stats %>% drop_na(timeSinceLastVisit) %>%
ggplot(aes(x=timeSinceLastVisit)) +
geom_density() +
theme_classic()
foraging.stats %>% drop_na(timeSinceLastVisit) %>%
ggplot(aes(x=timeSinceLastVisit, y=timeInside)) +
geom_point() +
theme_classic()
foraging.stats %>% drop_na(timeSinceLastVisit) %>%
ggplot(aes(x=timeSinceLastVisit, y=timeInside)) +
geom_point() +
theme_classic()
foraging.stats %>% drop_na(timeSinceLastVisit) %>%
ggplot(aes(x=timeSinceLastVisit, y=timeInside)) +
geom_point() +
theme_classic()
sqrt(50*10000/pi)
# Make a buffer around the nests.
nest.buffer.400 <- st_buffer(nests, dist=400)
# Pull out just RLK.
rlk.buffer.400 <- filter(nest.buffer.400, site == 'RLK' & year == 2019)
# Find the difference with the telemetry points.
rlk.foraging.400 <- st_difference(rlk.sf, rlk.buffer.400)
# Do the annoying data frame thing again.
rlk.foraging.c.400 <- rlk.foraging.400 %>% mutate(xcoord = unlist(map(rlk.foraging.400$geometry,1)),
ycoord = unlist(map(rlk.foraging.400$geometry,2))) %>%
data.frame() %>%
select(xcoord, ycoord, datetime, id)
# Calculate revisits, using 150m.
foraging.visits.400 <- getRecursions(rlk.foraging.c.400, 150)
# And plot.
plot(foraging.visits.400, rlk.foraging.c, axes=FALSE)
plot(foraging.visits.400, rlk.foraging.c, axes=FALSE)
str(foraging.visits.400)
data.frame(c(foraging.visits.400$revisitStats))
data.frame(c(foraging.visits.400$revisitStats, foraging.visits.400$revisits))
data.frame(c(foraging.visits.400$revisitStats, foraging.visits.400$revisits)) %>% head()
foraging.visits.400$revisits
data.frame(foraging.visits.400$revisits)
data.frame(foraging.visits.400$revisitStats) %>%
cbind(foraging.visits.400$revisits)
str(foraging.visits.400)
plot(foraging.visits.400)
test <- data.frame(foraging.visits.400$revisitStats)
ggplot(test, aes(x=x, y=y)) +
geom_point() +
theme_classic()
ggplot(test, aes(x=x, y=y)) +
geom_point(fill=visitIdx) +
theme_classic()
View(test)
ggplot(test, aes(x=x, y=y)) +
geom_point(fill=visitIdx) +
theme_classic()
ggplot(test, aes(x=x, y=y, color=visitIdx)) +
geom_point() +
theme_classic()
ggplot(test, aes(x=x, y=y, color=visitIdx)) +
geom_point() +
scale_color_viridis() +
theme_classic()
ggplot(test, aes(x=x, y=y, color=visitIdx)) +
geom_point() +
scale_color_brewer(palette = "RdYlBu") +
theme_classic()
ggplot(test, aes(x=x, y=y, color=visitIdx)) +
geom_point() +
scale_color_brewer(type='div') +
theme_classic()
ggplot(test, aes(x=x, y=y, color=visitIdx)) +
geom_point() +
scale_color_brewer() +
theme_classic()
ggplot(test, aes(x=x, y=y, color=visitIdx)) +
geom_point() +
scale_fill_discrete() +
theme_classic()
ggplot(test, aes(x=x, y=y, color=visitIdx)) +
geom_point() +
scale_fill_discrete(palette = "RdYlBu") +
theme_classic()
ggplot(test, aes(x=x, y=y, color=visitIdx, fill=visitIdx)) +
geom_point() +
scale_fill_discrete(palette = "RdYlBu") +
theme_classic()
ggplot(test, aes(x=x, y=y, color=visitIdx, fill=visitIdx)) +
geom_point() +
#scale_fill_discrete(palette = "RdYlBu") +
theme_classic()
ggplot(test, aes(x=x, y=y, color=as.factor(visitIdx))) +
geom_point() +
#scale_fill_discrete(palette = "RdYlBu") +
theme_classic()
ggplot(test, aes(x=x, y=y, color=as.factor(visitIdx))) +
geom_point() +
scale_fill_brewer(palette = "RdYlBu") +
theme_classic()
ggplot(test, aes(x=x, y=y, color=as.factor(visitIdx))) +
geom_point() +
scale_color_brewer(palette = "RdYlBu") +
theme_classic()
ggplot(test, aes(x=x, y=y, color=as.factor(visitIdx))) +
geom_point() +
scale_color_brewer(palette="RdYlBu", direction=-1) +
theme_classic()
# Make a data frame for ease.
revisits.400 <- data.frame(foraging.visits.400$revisitStats)
# Plot it.
ggplot(revisits.400, aes(x=x, y=y, color=as.factor(visitIdx))) +
geom_point() +
scale_color_brewer(palette="RdYlBu", direction=-1) +
theme_classic()
ggplot(test, aes(x=x, y=y, color=as.factor(visitIdx))) +
geom_point() +
scale_color_brewer(palette="RdYlBu", direction=-1) +
theme_classic()
ggplot(test, aes(x=x, y=y, color=as.factor(visitIdx))) +
geom_point() +
scale_color_brewer(palette="RdYlBu", direction=-1) +
theme_classic() +
theme(axis.title=element_blank())
ggplot(test, aes(x=x, y=y, color=as.factor(visitIdx))) +
geom_point() +
scale_color_brewer(palette="RdYlBu", direction=-1) +
theme_classic() +
theme(axis.ticks=element_blank())
ggplot(test, aes(x=x, y=y, color=as.factor(visitIdx))) +
geom_point() +
scale_color_brewer(palette="RdYlBu", direction=-1) +
theme_classic() +
theme(axis.ticks.x=element_blank())
ggplot(test, aes(x=x, y=y, color=as.factor(visitIdx))) +
geom_point() +
scale_color_brewer(palette="RdYlBu", direction=-1) +
theme_classic() +
theme(axis.ticks.=element_blank(),
axis.title=element_blank())
ggplot(test, aes(x=x, y=y, color=as.factor(visitIdx))) +
geom_point() +
scale_color_brewer(palette="RdYlBu", direction=-1) +
theme_classic() +
theme(axis.ticks.=element_blank(),
axis.text=element_blank())
ggplot(test, aes(x=x, y=y, color=as.factor(visitIdx))) +
geom_point() +
scale_color_brewer(palette="RdYlBu", direction=-1) +
theme_void()
ggplot(test, aes(x=x, y=y, color=as.factor(coordIdx))) +
geom_point() +
scale_color_brewer(palette="RdYlBu", direction=-1) +
theme_void()
ggplot(test, aes(x=x, y=y, color=as.factor(coordIdx))) +
geom_point() +
#scale_color_brewer(palette="RdYlBu", direction=-1) +
theme_void()
# Plot it.
ggplot(revisits.400, aes(x=x, y=y, color=as.factor(visitIdx))) +
geom_point() +
scale_color_brewer(palette="RdYlBu", direction=-1) +
theme_void()
# Plot it.
ggplot(revisits.400, aes(x=x, y=y, color=as.factor(visitIdx))) +
geom_point() +
scale_color_brewer(palette="RdYlBu", direction=-1) +
theme_void()
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Import conflict settings.
source('../src/conflicted.R')
#Load some libraries.
library(tidyverse)
library(sf)
library(lubridate)
library(adehabitatHR)
library(ggplot2)
library(extrafont)
library(recurse)
# Define some colors.
m <- '#d36135' # Flame
f <- '#689689' # Polished pine
# Load telemetry data.
tl <- read_csv('../data/processed/telemetry_2018-2019.csv')
# RLK appears to have been missexed. I'll change that here.
tl <- tl %>% mutate(sex = case_when(
id == 'HAR04' ~ 'm',
TRUE ~ sex
))
# Define breeding season.
breeding.2018 <- interval(ymd(20180511), ymd(20180901))
breeding.2019 <- interval(ymd(20190511), ymd(20190901))
# Select only points that fall within the breeding season.
tl.breeding <- tl %>%
filter(date %within% c(breeding.2018, breeding.2019))
# Summarize.
tl.breeding %>% group_by(id) %>%
mutate(min=min(date), max=max(date), n.points=n(), period=max-min) %>%
distinct(id, sex, site, n.points, min, max, period)
tl.breeding %>% group_by(id) %>%
mutate(t.points=n(), base.points=sum(at.base), base.prop=base.points/t.points*100) %>%
distinct(id, sex, site, base.prop)
tl.breeding %>% group_by(id) %>%
mutate(t.points=n(), base.points=sum(at.base), base.prop=base.points/t.points*100) %>%
distinct(id, sex, site, base.prop) %>%
group_by(sex) %>% mutate(mean.nest.time=mean(base.prop)) %>%
distinct(sex, mean.nest.time)
getRecursionsInPolygon(rlk.sf, rlk.buffer.400)
getRecursionsInPolygon(rlk.sf.c, rlk.buffer.400)
class(rlk.buffer.400)
nests
nests[1, ]
nests[,1]
getRecursionsAtLocations(rlk.sf.c, nests[,1])
getRecursionsAtLocations(rlk.sf.c, nests[,1], radius=400)
getRecursionsAtLocations(rlk.sf.c, c(427445, 5507092), radius=400)
View(nests)
rlk.nest <- read_csv('../data/processed/telemetry_sites.csv') %>%
filter(nests, site == 'RLK', year == 2019) %>%
select(xcoord, ycoord)
rlk.nest <- read_csv('../data/processed/telemetry_sites.csv') %>%
filter(nests, site == 'RLK', year == 2019) %>%
select(xcoord, ycoord)
rlk.nest <- read_csv('../data/processed/telemetry_sites.csv') %>%
filter(nests, site == 'RLK' & year == 2019) %>%
select(xcoord, ycoord)
rlk.nest <- read_csv('../data/processed/telemetry_sites.csv')# %>%
View(rlk.nest)
rlk.nest <- read_csv('../data/processed/telemetry_sites.csv') %>%
filter(site == 'RLK' & year == 2019) %>%
select(x_coord, y_coord)
rlk.nest <- read_csv('../data/processed/telemetry_sites.csv') %>%
filter(site == 'RLK' & year == 2019) %>%
select(x_coord, y_coord)
getRecursionsAtLocations(rlk.sf.c, rlk.nest, radius=400)
class(rlk.nest)
rlk.nest <- read_csv('../data/processed/telemetry_sites.csv') %>%
#filter(site == 'RLK' & year == 2019) %>%
select(x_coord, y_coord)
class(rlk.nest)
getRecursionsAtLocations(rlk.sf.c, rlk.nest, radius=400)
head(rlk.nest)
rlk.nest <- data.frame(rlk.nest)
class(rlk.nest)
getRecursionsAtLocations(rlk.sf.c, rlk.nest, radius=400)
rlk.nest <- read_csv('../data/processed/telemetry_sites.csv') %>%
filter(site == 'RLK' & year == 2019) %>%
select(x_coord, y_coord) %>%
data.frame()
getRecursionsAtLocations(rlk.sf.c, rlk.nest, radius=400)
# Calculate revisits.
nest.visits <- getRecursionsAtLocations(rlk.sf.c, rlk.nest, radius=400)
View(nest.visits)
# Pull out the important stuff.
visit.stats <- nest.visits$revisitStats
View(visit.stats)
nest.visits$revisitStats %>%
mutate(time=round_date(entranceTime, unit='hour')) %>%
mutate(time=format(time, '%H:%M:%S')) %>%
mutate(date=date(entranceTime)) %>% view()
# Pull out the important stuff.
visit.stats <- nest.visits$revisitStats %>%
mutate(time=round_date(entranceTime, unit='hour')) %>%
mutate(time=format(time, '%H:%M:%S')) %>%
mutate(date=date(entranceTime)) %>% view()
# Pull out the important stuff.
visit.stats <- nest.visits$revisitStats %>%
mutate(time=round_date(entranceTime, unit='hour')) %>%
mutate(time=format(time, '%H:%M:%S')) %>%
mutate(date=date(entranceTime))
View(visit.stats)
ggplot(visit.stats, aes(x=timeInside)) +
geom_density() +
theme_classic()
head(visit.stats)
ggplot(visit.stats, aes(x=timeSinceLastVisit)) +
geom_density() +
theme_classic()
ggplot(visit.stats, aes(x=time, y=timeInside)) +
geom_boxplot() +
theme_classic() +
geom_jitter(alpha=0.25) +
labs(x='entrance time', y='visit duration')
ggplot(visit.stats, aes(x=time, y=timeSinceLastVisit)) +
geom_boxplot() +
theme_classic() +
geom_jitter(alpha=0.25) +
labs(x='entrance time', y='visit duration')
ggplot(visit.stats, aes(x=timeSinceLastVisit, y=timeInside)) +
geom_point() +
theme_classic()
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Import conflict settings.
source('../src/conflicted.R')
#Load some libraries.
library(tidyverse)
library(sf)
library(lubridate)
library(ggplot2)
library(recurse)
library(move)
library(suncalc)
# Load telemetry data.
tl <- read_csv('../data/processed/telemetry_2018-2019.csv')
# RLK appears to have been missexed. I'll change that here.
tl <- tl %>% mutate(sex = case_when(
id == 'HAR04' ~ 'm',
TRUE ~ sex
))
# Define breeding season.
breeding.2018 <- interval(ymd(20180511), ymd(20180901))
breeding.2019 <- interval(ymd(20190511), ymd(20190901))
# Select only points that fall within the breeding season.
tl.breeding <- tl %>%
filter(date %within% c(breeding.2018, breeding.2019))
# Transform telemetry data to a Move object.
tl.move <- move(x=tl.breeding$lon, y=tl.breeding$lat, time=tl.breeding$datetime,
proj=CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'),
data=tl.breeding, animal=tl.breeding$id)
# Convert to UTMs.
tl.move <- spTransform(tl.move, CRSobj='+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs')
# Calculate step length.
dist <- distance(tl.move)
# Reformat into something useful.
dist <- dist %>%
lapply(., `length<-`, max(lengths(.))) %>%  ## make all elements as the length of the longest one
map_df(~.) %>%
pivot_longer(cols=everything(), names_to='id', values_to='distance') %>%
drop_na()
# Plot it.
ggplot(dist, aes(y=distance)) +
geom_histogram(binwidth=10) +
theme_classic() +
coord_flip() +
facet_wrap(~id, scales='free')
dist %>% filter(distance < 2000) %>%
ggplot(aes(y=distance)) +
geom_histogram(binwidth=10) +
theme_classic() +
coord_flip() +
facet_wrap(~id, scales='free')
# Separate out RLK points.
rlk <- filter(tl.breeding, id == 'HAR04')
# Calculate sunrise and sunset.
suntimes <- getSunlightTimes(data=rlk, keep=c('sunrise', 'sunset'),
tz='America/Vancouver')
# Filter out daytime points.
rlk <- left_join(rlk, suntimes, by=c('lat', 'lon', 'date')) %>%
filter(hour(datetime) > hour(sunrise)) %>%
filter(hour(datetime) < hour(sunset))
# Make a spatial object and convert to UTMs.
rlk.sf <- rlk %>% st_as_sf(coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
# Convert back to data frame.
rlk.sf.c <- rlk.sf %>% mutate(xcoord = unlist(map(rlk.sf$geometry,1)),
ycoord = unlist(map(rlk.sf$geometry,2))) %>%
data.frame() %>%
select(xcoord, ycoord, datetime, id)
# Calculate revisits.
rlk.visit <- getRecursions(rlk.sf.c, 100)
# And plot them.
plot(rlk.visit, rlk.sf.c, axes=FALSE)
rlk.200 <- getRecursions(rlk.sf.c, 200)
plot(rlk.200, rlk.sf.c, axes=FALSE)
rlk.300 <- getRecursions(rlk.sf.c,300)
plot(rlk.300, rlk.sf.c, axes=FALSE)
rlk.400 <- getRecursions(rlk.sf.c, 400)
plot(rlk.400, rlk.sf.c, axes=FALSE)
rlk.500 <- getRecursions(rlk.sf.c, 500)
plot(rlk.500, rlk.sf.c, axes=FALSE)
visit.threshold = quantile(rlk.300$revisits, 0.8)
cluster = kmeans(rlk.sf.c[rlk.300$revisits > visit.threshold, c('xcoord', 'ycoord')], centers=3)
plot(rlk.sf.c$xcoord, rlk.sf.c$ycoord,
pch = '.', axes=FALSE, asp=1)
with(rlk.sf.c[rlk.300$revisits > visit.threshold,],
points(xcoord, ycoord, pch=c(15:17)[cluster$cluster]))
# I broke something when I joined the suntimes, so I'll re-make this.
rlk <- filter(tl.breeding, id == 'HAR04')
# Look at distribution of times.
rlk %>% mutate(n.time=lead(time), d.time=difftime(n.time, time, units='mins')) %>%
ggplot(aes(x=n.time)) +
geom_density(fill='lightgrey') +
theme_classic()
filter(dist, id == 'HAR04') %>%
filter(distance < 1000) %>%
ggplot(aes(x=distance)) +
geom_density(fill='lightgrey') +
theme_classic()
nests <- read_csv('../data/processed/telemetry_sites.csv') %>%
st_as_sf(coords=c('x_coord', 'y_coord')) %>%
st_set_crs('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs')
# Make a buffer around the nests.
nest.buffer <- st_buffer(nests, dist=150)
# Pull out just RLK.
rlk.buffer <- filter(nest.buffer, site == 'RLK' & year == 2019)
# Find the difference with the telemetry points.
rlk.foraging <- st_difference(rlk.sf, rlk.buffer)
# Do the annoying data frame thing again.
rlk.foraging.c <- rlk.foraging %>% mutate(xcoord = unlist(map(rlk.foraging$geometry,1)),
ycoord = unlist(map(rlk.foraging$geometry,2))) %>%
data.frame() %>%
select(xcoord, ycoord, datetime, id)
# Calculate revisits, using 150m.
foraging.visits <- getRecursions(rlk.foraging.c, 150)
# And plot.
plot(foraging.visits, rlk.foraging.c, axes=FALSE)
foraging.stats %>% drop_na(entranceTime) %>%
mutate(time=round_date(entranceTime, unit='hour')) %>%
mutate(time=format(time, '%H:%M:%S')) %>%
ggplot(aes(x=time, y=timeInside)) +
geom_boxplot() +
theme_classic() +
geom_jitter(alpha=0.25) +
labs(x='entrance time', y='visit duration')
# Pull out the important stuff.
foraging.stats <- foraging.visits$revisitStats
# Plot it.
foraging.stats %>% drop_na(entranceTime) %>%
mutate(time=round_date(entranceTime, unit='hour')) %>%
mutate(time=format(time, '%H:%M:%S')) %>%
ggplot(aes(x=time, y=timeInside)) +
geom_boxplot() +
theme_classic() +
geom_jitter(alpha=0.25) +
labs(x='entrance time', y='visit duration')
foraging.stats %>% drop_na(timeSinceLastVisit) %>%
ggplot(aes(x=timeSinceLastVisit)) +
geom_density() +
theme_classic()
foraging.stats %>% drop_na(timeSinceLastVisit) %>%
ggplot(aes(x=timeSinceLastVisit, y=timeInside)) +
geom_point() +
theme_classic()
# Make a buffer around the nests.
nest.buffer.400 <- st_buffer(nests, dist=400)
# Pull out just RLK.
rlk.buffer.400 <- filter(nest.buffer.400, site == 'RLK' & year == 2019)
# Find the difference with the telemetry points.
rlk.foraging.400 <- st_difference(rlk.sf, rlk.buffer.400)
# Do the annoying data frame thing again.
rlk.foraging.c.400 <- rlk.foraging.400 %>% mutate(xcoord = unlist(map(rlk.foraging.400$geometry,1)),
ycoord = unlist(map(rlk.foraging.400$geometry,2))) %>%
data.frame() %>%
select(xcoord, ycoord, datetime, id)
# Calculate revisits, using 150m.
foraging.visits.400 <- getRecursions(rlk.foraging.c.400, 150)
# Make a data frame for ease.
revisits.400 <- data.frame(foraging.visits.400$revisitStats)
# Plot it.
ggplot(revisits.400, aes(x=x, y=y, color=as.factor(visitIdx))) +
geom_point() +
scale_color_brewer(palette="RdYlBu", direction=-1) +
theme_void()
# Pull out just the RLK nest coords.
rlk.nest <- read_csv('../data/processed/telemetry_sites.csv') %>%
filter(site == 'RLK' & year == 2019) %>%
select(x_coord, y_coord) %>%
data.frame()
## Note that recuse require this to be a data frame ONLY (no tibbles allowed).
# Calculate revisits.
nest.visits <- getRecursionsAtLocations(rlk.sf.c, rlk.nest, radius=400)
# Pull out the important stuff.
visit.stats <- nest.visits$revisitStats %>%
mutate(time=round_date(entranceTime, unit='hour')) %>%
mutate(time=format(time, '%H:%M:%S')) %>%
mutate(date=date(entranceTime))
ggplot(visit.stats, aes(x=timeInside)) +
geom_density() +
theme_classic()
ggplot(visit.stats, aes(x=time, y=timeInside)) +
geom_boxplot() +
theme_classic() +
geom_jitter(alpha=0.25) +
labs(x='entrance time', y='visit duration')
ggplot(visit.stats, aes(x=timeSinceLastVisit)) +
geom_density() +
theme_classic()
ggplot(visit.stats, aes(x=timeSinceLastVisit, y=timeInside)) +
geom_point() +
theme_classic()
