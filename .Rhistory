ggplot(hr, aes(x=factor(id), y=nestling)) +
geom_jitter(aes(shape=factor(method), color=factor(percent)), size=3, alpha=0.7,
position=position_jitter(width=0.2)) +
theme_classic() +
labs(x='ID', y='Home range size (ha)', title='Nestling season home range',
caption='Home range size calculated with nestling season (11 May-10 July) points available in 2019') +
guides(color=guide_legend('Percent'), shape=guide_legend('Method'))
ggplot(hr, aes(x=factor(id), y=total)) +
geom_jitter(aes(shape=factor(method), color=factor(percent)), size=3, alpha=0.7,
position=position_jitter(width=0.2)) +
theme_classic() +
labs(x='ID', y='Home range size (ha)', title='Total home range',
caption='Home range size calculated with all location points available in 2019') +
guides(color=guide_legend('Percent'), shape=guide_legend('Method'))
ggplot(hr, aes(x=factor(id), y=nestling)) +
geom_jitter(aes(shape=factor(method), color=factor(percent)), size=3, alpha=0.7,
position=position_jitter(width=0.2)) +
theme_classic() +
labs(x='ID', y='Home range size (ha)', title='Nestling season home range',
caption='Home range size calculated with nestling season (11 May-10 July) points available in 2019') +
guides(color=guide_legend('Percent'), shape=guide_legend('Method'))
library('tidyverse')
library('lubridate')
library('move')
library('adehabitatHR')
library('knitr')
library('kableExtra')
library('sf')
library('ggplot2')
# Read in the data.
df <- read.csv('../data/processed/telem_all.csv',
header=TRUE, stringsAsFactors=FALSE) %>%
drop_na('lat')
# Do the datetime thing.
df$datetime <- ymd_hms(df$datetime, tz='America/Vancouver')
# Create intervals.
winter2 <- interval(ymd(20190101), ymd(20190414))
incubation <- interval(ymd(20190415), ymd(20190510))
nestling <- interval(ymd(20190511), ymd(20190710))
fledgling <- interval(ymd(20190711), ymd(20190901))
winter1 <- interval(ymd(20190902), ymd(20191231))
# Assign locations to period.
df <- df %>%
mutate(yrls=ymd(paste(2019, month(datetime), day(datetime))),
period=case_when(
yrls %within% incubation ~ 'incubation',
yrls %within% nestling ~ 'nestling',
yrls %within% fledgling ~ 'fledgling',
yrls %within% winter1 ~ 'winter',
yrls %within% winter2 ~ 'winter'
)
)
# Do the spatial thing.
sf.df <- st_as_sf(df, coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
# 50% and 95% MCP for each tag and all points.
mcp.all <- sf.df %>%
dplyr::select(geometry, id) %>%
as_Spatial() %>%
mcp.area(percent=c(50, 95),
unin='m', unout='ha', plotit=FALSE)%>%
rownames_to_column(var='name') %>%
mutate(percent=as.numeric(name)) %>%
dplyr::select(-name)
# Add new columns
mcp.all <- mcp.all %>%
add_column(method='MCP', period='total')
# Fix formatting so it can actually be graphed.
mcp.all <- pivot_longer(mcp.all,
cols=c('HAR04', 'HAR05', 'HAR07', 'HAR08', 'HAR09', 'HAR10'), names_to='id')
# 50% and 95% MCP for each tag and nestling points.
mcp.nest <- sf.df %>%
filter(period == 'nestling') %>%
dplyr::select(geometry, id) %>%
as_Spatial() %>%
mcp.area(percent=c(50, 95),
unin='m', unout='ha', plotit=FALSE)%>%
rownames_to_column(var='name') %>%
mutate(percent=as.numeric(name)) %>%
dplyr::select(-name)
mcp.nest <- mcp.nest %>%
add_column(method='MCP', period='nestling') %>%
pivot_longer(cols=c('HAR04', 'HAR05', 'HAR07', 'HAR08', 'HAR09', 'HAR10'),
names_to='id')
# 50% and 95% MCP for each tag and fledgling points.
mcp.fledge <- sf.df %>%
filter(period == 'fledgling') %>%
dplyr::select(geometry, id) %>%
as_Spatial() %>%
mcp.area(percent=c(50, 95),
unin='m', unout='ha', plotit=FALSE)%>%
rownames_to_column(var='name') %>%
mutate(percent=as.numeric(name)) %>%
dplyr::select(-name)
mcp.fledge <- mcp.fledge %>%
add_column(method='MCP', period='fledgling') %>%
pivot_longer(cols=c('HAR05', 'HAR07'),
names_to='id')
# 50% and 95% MCP for each tag and winter points.
mcp.wint <- sf.df %>%
filter(period == 'winter') %>%
dplyr::select(geometry, id) %>%
as_Spatial() %>%
mcp.area(percent=c(50, 95),
unin='m', unout='ha', plotit=FALSE)%>%
rownames_to_column(var='name') %>%
mutate(percent=as.numeric(name)) %>%
dplyr::select(-name)
mcp.wint <- mcp.wint %>%
add_column(method='MCP', period='winter') %>%
pivot_longer(cols=c('HAR05', 'HAR07'),
names_to='id')
# Now make a kud.
kud.all <- sf.df %>%
dplyr::select(id, geometry) %>%
as_Spatial() %>%
kernelUD(extent=0.25, grid=100) %>%
kernel.area(percent=95, unin='m', unout='ha') %>%
as.data.frame %>%
rownames_to_column(var='name') %>%
mutate(percent=as.numeric(name)) %>%
dplyr::select(-name) %>%
add_column(method='KDE', period='total') %>%
pivot_longer(cols=c('HAR04', 'HAR05', 'HAR07', 'HAR08', 'HAR09', 'HAR10'),
names_to='id')
# And for 50%.
k.a.50 <- sf.df %>%
dplyr::select(id, geometry) %>%
as_Spatial() %>%
kernelUD(extent=0.25, grid=100) %>%
kernel.area(percent=50, unin='m', unout='ha') %>%
as.data.frame %>%
rownames_to_column(var='name') %>%
mutate(percent=as.numeric(name)) %>%
dplyr::select(-name) %>%
add_column(method='KDE', period='total') %>%
pivot_longer(cols=c('HAR04', 'HAR05', 'HAR07', 'HAR08', 'HAR09', 'HAR10'),
names_to='id')
# For nestling 95%.
k.n.95 <- sf.df %>%
filter(period == 'nestling') %>%
dplyr::select(geometry, id) %>%
as_Spatial() %>%
kernelUD(extent=0.3, grid=100) %>%
kernel.area(percent=95, unin='m', unout='ha') %>%
as.data.frame %>%
rownames_to_column(var='name') %>%
mutate(percent=as.numeric(name)) %>%
dplyr::select(-name) %>%
add_column(method='KDE', period='nestling') %>%
pivot_longer(cols=c('HAR04', 'HAR05', 'HAR07', 'HAR08', 'HAR09', 'HAR10'),
names_to='id')
# For nestling 50%.
k.n.50 <- sf.df %>%
filter(period == 'nestling') %>%
dplyr::select(geometry, id) %>%
as_Spatial() %>%
kernelUD(extent=0.3, grid=100) %>%
kernel.area(percent=50, unin='m', unout='ha') %>%
as.data.frame %>%
rownames_to_column(var='name') %>%
mutate(percent=as.numeric(name)) %>%
dplyr::select(-name) %>%
add_column(method='KDE', period='nestling') %>%
pivot_longer(cols=c('HAR04', 'HAR05', 'HAR07', 'HAR08', 'HAR09', 'HAR10'),
names_to='id')
# For fledgling 95%
k.f.95 <- sf.df %>%
filter(period == 'fledgling') %>%
dplyr::select(geometry, id) %>%
as_Spatial() %>%
kernelUD(extent=0.3, grid=100) %>%
kernel.area(percent=95, unin='m', unout='ha') %>%
as.data.frame %>%
rownames_to_column(var='name') %>%
mutate(percent=as.numeric(name)) %>%
dplyr::select(-name) %>%
add_column(method='KDE', period='fledgling') %>%
pivot_longer(cols=c('HAR05', 'HAR07'),
names_to='id')
k.f.50 <- sf.df %>%
filter(period == 'fledgling') %>%
dplyr::select(geometry, id) %>%
as_Spatial() %>%
kernelUD(extent=0.3, grid=100) %>%
kernel.area(percent=50, unin='m', unout='ha') %>%
as.data.frame %>%
rownames_to_column(var='name') %>%
mutate(percent=as.numeric(name)) %>%
dplyr::select(-name) %>%
add_column(method='KDE', period='fledgling') %>%
pivot_longer(cols=c('HAR05', 'HAR07'),
names_to='id')
# Merge everything.
hr <- bind_rows(mcp.all, mcp.nest, mcp.fledge, mcp.wint, kud.all, k.a.50, k.n.95, k.n.50, k.f.95, k.f.50)
hr <- hr %>%
pivot_wider(names_from=period, values_from=value) %>%
dplyr::select(id, method, percent, total, nestling, fledgling, winter) %>%
arrange(id, method, percent)
# Create some summary stuff.
df.sum <- df %>%
dplyr::select(id, period) %>%
group_by(id, period) %>%
summarize(n=n())
df.sum <- df.sum %>%
pivot_wider(names_from=period, values_from=n, values_fill=list(n=0)) %>%
mutate(total=incubation+nestling+fledgling+winter, percent=NA,
method='Number of points') %>%
dplyr::select(id, method, percent, total, incubation, nestling, fledgling, winter)
# Add to main table.
hr2 <- bind_rows(hr, df.sum)
hr2 <- hr2 %>%
arrange(id, method, percent) %>%
dplyr::select(id, method, percent, total, incubation, nestling, fledgling, winter)
Period <- c('Incubation', 'Nestling', 'Fledgling', 'Winter')
Start <- c(ymd(20190415), ymd(20190511), ymd(20190711), ymd(20190902))
End <- c(ymd(20190510), ymd(20190710), ymd(20190901), ymd(20190414))
pers <- data.frame(Period, Start, End)
kable(pers) %>%
kable_styling(bootstrap_options='condensed', full_width=F, position='left')
options(knitr.kable.NA='')
kable(hr2, digits=2, align='c',
col.names=c('ID', 'Method', '%', 'Total (ha)', 'Incubation', 'Nestling',
'Fledgling', 'Winter')) %>%
kable_styling(full_width = T) %>%
column_spec(1, bold = T) %>%
collapse_rows(columns=1:2, valign='top') %>%
row_spec(c(5, 10, 15, 20, 25, 30), bold=T, background='lightgray') %>%
add_header_above(c(" "=4, "Period"=4))
ggplot(hr, aes(x=factor(id), y=total)) +
geom_jitter(aes(shape=factor(method), color=factor(percent)), size=3, alpha=0.7,
position=position_jitter(width=0.2)) +
theme_classic() +
labs(x='ID', y='Home range size (ha)', title='Total home range',
caption='Home range size calculated with all location points available in 2019') +
guides(color=guide_legend('Percent'), shape=guide_legend('Method'))
ggplot(hr, aes(x=factor(id), y=nestling)) +
geom_jitter(aes(shape=factor(method), color=factor(percent)), size=3, alpha=0.7,
position=position_jitter(width=0.2)) +
theme_classic() +
labs(x='ID', y='Home range size (ha)', title='Nestling season home range',
caption='Home range size calculated with nestling season (11 May-10 July) points available in 2019') +
guides(color=guide_legend('Percent'), shape=guide_legend('Method'))
# Load some libraries.
library('tidyverse')
library('lubridate')
# Read in the data.
df <- read.csv('../data/processed/telem_all.csv',
header=TRUE, stringsAsFactors=FALSE) %>%
drop_na('lat')
ska <- filter(site == 'SKA')
ska <- df %>% filter(site == 'SKA')
# Do the datetime thing.
df$datetime <- ymd_hms(df$datetime, tz='America/Vancouver')
# Do the datetime thing.
ska$datetime <- ymd_hms(ska$datetime, tz='America/Vancouver')
# Do the spatial thing.
ska.sf <- st_as_sf(df, coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
library('sf')
# Do the spatial thing.
ska.sf <- st_as_sf(df, coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
install.packages('tlocoh')
library('tlocoh')
install.packages("tlocoh", dependencies=T, repos=c("http://R-Forge.R-project.org"))
library('tlocoh')
library('tlocoh')
# Test T-LoCoh
data(toni)
update.packages(oldPkgs="tlocoh", repos="http://R-Forge.R-project.org")
library('tlocoh')
require(tlocoh)
library(tlocoh)
install.packages(FNN)
install.packages("FNN")
library(tlocoh)
# Test T-LoCoh
data(toni)
# Do the spatial thing.
ska.sf <- st_as_sf(ska, coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
# Define timezone.
pt <- 'America/Vancouver'
View(ska.sf)
# Make a lxy object.
ska.lxy <- xyt.lxy(xy=ska.sf, dt=pt, id='HAR05',
proj4string=CRS('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs'))
# Do the spatial thing.
ska.sf <- st_as_sf(ska, coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs') %>%
dplyr::select(lon, lat)
View(ska.sf)
library('sp')
library('rgdal')
# Do the spatial thing.
ska.sf <- toni.sp.latlong <- SpatialPoints(ska[ , c('lon', 'lat')],
proj4string=CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
# Do the spatial thing.
ska.sf <- SpatialPoints(ska[ , c('lon', 'lat')],
proj4string=CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
# Do the spatial thing.
ska.sf <- SpatialPoints(ska[ , c('lon', 'lat')],
proj4string=CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')) %>%
sp_transform('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs') %>%
ska.sf <- st_as_sf(ska, coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs') %>%
dplyr::select(lon, lat)
# Do the spatial thing.
ska.sf <- SpatialPoints(ska[ , c('lon', 'lat')],
proj4string=CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')) %>%
spTransform('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs') %>%
ska.sf <- st_as_sf(ska, coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs') %>%
dplyr::select(lon, lat)
View(ska)
# Do the spatial thing.
ska.sf <- SpatialPoints(ska[ , c('lon', 'lat')],
proj4string=CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')) %>%
spTransform(CRS('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs')) %>%
ska.sf <- st_as_sf(ska, coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs') %>%
dplyr::select(lon, lat)
# Do the spatial thing.
ska.sf <- SpatialPoints(ska[ , c('lon', 'lat')],
proj4string=CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')) %>%
spTransform(CRS('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs'))
# Define timezone.
pt <- 'America/Vancouver'
# Make a lxy object.
ska.lxy <- xyt.lxy(xy=ska.sf, dt=pt, id='HAR05',
proj4string=CRS('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs'))
colnames(ska.sf) <- c('x', 'y')
# Do the spatial thing. This is a bit different than usual.
ska.sf <- SpatialPoints(ska[ , c('lon', 'lat')],
proj4string=CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')) %>%
spTransform(CRS('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs')) %>%
rename(x=lon, y=lat)
# Do the spatial thing. This is a bit different than usual.
ska.sf <- SpatialPoints(ska[ , c('lon', 'lat')],
proj4string=CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')) %>%
spTransform(CRS('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs')) %>%
dplyr::rename(x=lon, y=lat)
colnames(ska.sf) <- c('x', 'y')
ncols(ska.sf)
ncol(ska.sf)
head(ska.sf)
# Do the spatial thing. This is a bit different than usual.
ska.sf <- ska %>% dplyr:select(lon, lat)
library('dplyr')
# Do the spatial thing. This is a bit different than usual.
ska.sf <- ska %>% dplyr:select(lon, lat)
# Do the spatial thing. This is a bit different than usual.
ska.sf <- ska %>% dplyr::select(lon, lat)
# Do the spatial thing. This is a bit different than usual.
ska.sf <- ska %>% dplyr::select(lon, lat) %>%
dplyr::rename(x=lon, y=lat)
# Do the spatial thing. This is a bit different than usual.
ska.sf <- ska %>% dplyr::select(lon, lat) %>%
dplyr::rename(x=lon, y=lat) %>%
SpatialPoints(c('lon', 'lat'),
proj4string=CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
toni.sp.latlong <- SpatialPoints(toni[ , c("long","lat")], proj4string=CRS("+proj=longlat +ellps=WGS84"))
toni.sp.utm <- spTransform(toni.sp.latlong, CRS("+proj=utm +south +zone=36 +ellps=WGS84"))
colnames(toni.mat.utm) <- c("x", "y")
toni.mat.utm <- coordinates(toni.sp.utm)
colnames(toni.mat.utm) <- c("x", "y")
View(toni.mat.utm)
# Do the spatial thing. This is a bit different than usual.
ska.latlon <- SpatialPoints(ska[ , c('lon', 'lat')],
proj4string=CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
# Do the spatial thing. This is a bit different than usual.
ska.sf <- SpatialPoints(ska[ , c('lon', 'lat')],
proj4string=CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
# Do the spatial thing. This is a bit different than usual.
ska.sf <- SpatialPoints(ska[ , c('lon', 'lat')],
proj4string=CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')) %>%
spTransform(CRS('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs'))
View(toni.sp.utm)
View(ska.sf)
ska.coords <- coordinates(ska.sf)
View(toni.sp.utm)
View(toni.mat.utm)
View(ska.coords)
colnames(ska.coords) <- c('x', 'y')
# Make a lxy object.
ska.lxy <- xyt.lxy(xy=ska.coords, dt=pt, id='HAR05',
proj4string=CRS('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs'))
# Do the datetime thing.
datetime <- ymd_hms(ska$datetime, tz='America/Vancouver')
# Make a lxy object.
ska.lxy <- xyt.lxy(xy=ska.coords, dt=datetime, id='HAR05',
proj4string=CRS('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs'))
# Look at some stuff.
summary(ska.lxy)
# Look at some stuff.
summary(ska.lxy)
# Look at some stuff.
print(summary(ska.lxy))
plot(ska.lxy)
tlocoh::hist(ska.lxy)
tlocoh::hist(ska.lxy)
hist(ska.lxy)
hist(ska.lxy)
hist(ska.lxy)
hist(ska.lxy)
hist(ska.lxy)
# Look for unusual bursts.
lxy.plot.freq(ska.lxy, cp=T)
# Load some libraries.
library('tidyverse')
library('dplyr')
library('lubridate')
library('sf')
library('tlocoh') # Requires the FNN package also.
library('sp')
library('rgdal')
# Read in the data.
df <- read.csv('../data/processed/telem_all.csv',
header=TRUE, stringsAsFactors=FALSE) %>%
drop_na('lat')
# Select just one site to work with.
ska <- df %>% filter(site == 'SKA')
# To make a lxy object, we need datetime and coordinates.
# Do the datetime thing.
datetime <- ymd_hms(ska$datetime, tz='America/Vancouver')
# Do the spatial thing. This is a bit different than usual.
ska.sf <- SpatialPoints(ska[ , c('lon', 'lat')],
proj4string=CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')) %>%
spTransform(CRS('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs'))
ska.coords <- coordinates(ska.sf)
colnames(ska.coords) <- c('x', 'y')
# Make a lxy object.
ska.lxy <- xyt.lxy(xy=ska.coords, dt=datetime, id='HAR05',
proj4string=CRS('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs'))
# Look at some stuff.
summary(ska.lxy)
hist(ska.lxy)
# Look for unusual bursts.
lxy.plot.freq(ska.lxy, cp=T)
lxy.plot.freq(ska.lxy, cp=T)
lxy.plot.freq(ska.lxy, cp=T)
# Look at some stuff.
summary(ska.lxy)
15*60
# Try thinning.
lxy.thin.byfreq(ska.lxy, id=HAR05, samp.freq=900,
lcm.round=120)
# Try thinning.
lxy.thin.byfreq(ska.lxy, id=HAR05, byfreq=TRUE, samp.freq=900, lcm.round=120)
# Try thinning.
lxy.thin.byfreq(ska.lxy, byfreq=TRUE, samp.freq=900, lcm.round=120)
16*60
# Try thinning.
lxy.thin.byfreq(ska.lxy, byfreq=TRUE, samp.freq=960, lcm.round=120)
# Try thinning.
ska.thin <- lxy.thin.byfreq(ska.lxy, byfreq=TRUE, samp.freq=960, lcm.round=120)
lxy.plot.freq(ska.thin, cp=T)
# Now set s and k.
ska.lxy <- lxy.nn.add(ska.lxy, s=0, k=25)
# And make hull plots.
ska.lhs <- lxy.lhs(ska.lxy, k=3*3:8, s=0)
# And plot the plots.
plot(ska.lhs, hulls=TRUE, figs.per.page=6)
# Add isopleths.
ska.lhs <- lhs.iso.add(ska.lhs)
plot(ska.lhs, iso=TRUE, figs.per.page=6)
plot(ska.lhs, iso=TRUE)
plot(ska.lhs, iso=TRUE, figs.per.page=1)
plot(ska.lhs, iso=T, k=15, allpts=T, cex.allpts=0.1, col.allpts="gray30", ufipt=F)
plot(ska.lhs, iso=T, k=15, allpts=T, cex.allpts=0.1, col.allpts="gray30", ufipt=F)
plot(ska.lhs, iso=T, k=18, allpts=T, cex.allpts=0.1, col.allpts="gray30", ufipt=F)
plot(ska.lhs, iso=T, k=21, allpts=T, cex.allpts=0.1, col.allpts="gray30", ufipt=F)
plot(ska.lhs, iso=T, k=24, allpts=T, cex.allpts=0.1, col.allpts="gray30", ufipt=F)
plot(ska.lhs, iso=T, k=9, allpts=T, cex.allpts=0.1, col.allpts="gray30", ufipt=F)
plot(ska.lhs, iso=T, k=12, allpts=T, cex.allpts=0.1, col.allpts="gray30", ufipt=F)
plot(ska.lhs, iso=T, k=18, allpts=T, cex.allpts=0.1, col.allpts="gray30", ufipt=F)
plot(ska.lhs, iso=T, k=21, allpts=T, cex.allpts=0.1, col.allpts="gray30", ufipt=F)
plot(ska.lhs, iso=T, k=24, allpts=T, cex.allpts=0.1, col.allpts="gray30", ufipt=F)
plot(ska.lhs, iso=T, k=9, allpts=T, cex.allpts=0.1, col.allpts="gray30", ufipt=F)
plot(ska.lhs, iso=T, k=12, allpts=T, cex.allpts=0.1, col.allpts="gray30", ufipt=F)
plot(ska.lhs, iso=T, k=18, allpts=T, cex.allpts=0.1, col.allpts="gray30", ufipt=F)
plot(ska.lhs, iso=T, k=21, allpts=T, cex.allpts=0.1, col.allpts="gray30", ufipt=F)
plot(ska.lhs, iso=T, k=24, allpts=T, cex.allpts=0.1, col.allpts="gray30", ufipt=F)
# The 18 and 21 look nice. Let's try some other metrics.
lhs.plot.isoarea(ska.lhs)
lhs.plot.isoear(ska.lhs)
lhs.plot.isoarea(ska.lhs)
lhs.plot.isoear(ska.lhs)
ska.lhs.k18 <- lhs.select(ska.lhs, k=18)
# Now to pick a s value.
ska.lxy <- lxy.ptsh.add(ska.lxy)
lxy.plot.pt2ctr(ska.lxy)
lxy.plot.sfinder(ska.lxy, delta.t=3600*c(12,24,36,48,54,60))
lxy.plot.sfinder(ska.lxy, delta.t=3600*c(12,24,36,48,54,60)) %>%
str()
s.find <- lxy.plot.sfinder(ska.lxy, delta.t=3600*c(12,24,36,48,54,60))
s.parity.24hrs <- s.find[[1]]$svals[["86400"]]
median(s.parity.24hrs)
# Add s value to hull object.
ska.lxy <- lxy.nn.add(ska.lxy, s=0.007, k=18)
plot(ska.lxy, iso=T, k=18)
summary(ska.lxy)
warnings()
