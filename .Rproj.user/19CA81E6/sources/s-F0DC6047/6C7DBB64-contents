---
title: "T-LoCoh parameter selection"
output: html_notebook
---
Ummm so I appear to have gotten waaaay ahead of myself with all the fun T-LoCoh stuff. Because what I actually really need to do first is deal with parameter selection. There are two parameters that must be defined by the user: nearest neighbor selection (*k*, *a*, or *r*) and a time scaling factor *s*. Lyons et al. (2013) suggest the following T-LoCoh workflow:

1. Select a value of *s* that sufficiently scales the relationship between time and distance for the time scale of interest.
2. Select a nearest neighbour method (*k*, *a* or *r* method) and parameter value that does the best job balancing type I and type II errors in the animal's total home range.
3. Sort hulls according to density, elongation, or time use metrics depending on the questions of interest.
4. Examine isopleths or hull parent points.
5. Interpret.

## 1: Select a value of s.

Because I'm interested in daily foraging behavior, a 24-hour period seems appropriate, ie, points in the same area but a day apart are scaled as being more distant than points in the same area in the same day. However, 24 hours may be too long a period to capture daily foraging behavior, since a visit to a patch in the evening and a visit to the same patch the following morning occur on different days but less than 24 hours apart, meaning 12 hours may be more suitable.

```{r, message=FALSE, warning=FALSE, echo=TRUE}
# Load up some libraries.
library('tidyverse')
library('lubridate')
library('sp')
library('rgdal')
library('tlocoh') # Requires the FNN package to be installed.

# Read in the data.
df <- read.csv('../data/processed/telem_all.csv',
               header=TRUE, stringsAsFactors=FALSE) %>%
  drop_na('lat')

# Select just one site to work with.
ska <- df %>% filter(site == 'SKA')

# To make a lxy object, we need datetime and coordinates.

# Do the datetime thing.
datetime <- ymd_hms(ska$datetime, tz='America/Vancouver')

# Do the spatial thing. This is a bit different than usual.
ska.sf <- SpatialPoints(ska[ , c('lon', 'lat')],
  proj4string=CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')) %>%
  spTransform(CRS('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs'))

ska.coords <- coordinates(ska.sf)
colnames(ska.coords) <- c('x', 'y')

# Make a lxy object.
ska.lxy <- xyt.lxy(xy=ska.coords, dt=datetime, id='HAR05',
                   proj4string=CRS('+proj=utm +zone=10 
                                   +datum=WGS84 +units=m +no_defs'))

# See if something jumps out.
lxy.plot.sfinder(ska.lxy, delta.t=3600*c(12,24,36,48,54,60))
```
This graph shows that for a 24-hour period, the diffusion distance term will be about equal to the spatial terms for half of all the point pairs when *s* = 0.008 or so. Alternatively, for a 12-hour period, time and space terms are about equal when *s* = 0.012. To get the exact s values, I followed the instructions [here](http://tlocoh.r-forge.r-project.org/tips/getting_vals_from_s-finder.html).
```{r, message=FALSE, warning=FALSE, echo=TRUE}
s.plot <- lxy.plot.sfinder(ska.lxy, delta.t=3600*c(12,24,36,48,54,60))
svals.24 <- s.plot[[1]]$svals[['86400']]
svals.12 <- s.plot[[1]]$svals[['43200']]

median(svals.12)
median(svals.24)
```
That gets me exact values for *s*:

* 12 hours: 0.013
* 24 hours: 0.007

## 2: Select nearest neighbor method and parameter value.

The supplemental material to Lyons et al. (2013) recommends the *a* method in most cases. It seems especially appropriate for my data, because it is robust to outliers and I don't want occasional forays (which goshawks do make) to bias my results. Annoyingly, most of the tutorial and guide material available focuses on the *k* method, despite this recommendation.

From my previous playing around with the *k* method, I know that k = 18 looks pretty good, so I'll start there.

```{r, message=FALSE, warning=FALSE, echo=TRUE}
ska.lxy <- lxy.nn.add(ska.lxy, s=0.007, a=auto.a(nnn=18, ptp=0.98))

summary(ska.lxy)
```
So if *a* = 40560, then 98% of my location points will have at least 18 neighbors, for a 24-hour timeperiod. This gives me a starting point, and I can check out a few other values of *a* to see how they look (ie, 20000, 30000, 40000, 50000, 60000).

```{r, message=FALSE, warning=FALSE, echo=TRUE}
# Identify nearest neighbor set large enough to include desired a values.
ska.lxy <- lxy.nn.add(ska.lxy, s=0.007, k=20)

# create a hullset object using the desired a values.
ska.lhs.amixed <- lxy.lhs(ska.lxy, s=0.007, a=5:10*1000, iso.add=T)

# Plot isopleths and edge:area curves.
lhs.plot.isoarea(ska.lhs.amixed)
lhs.plot.isoear(ska.lhs.amixed)
```
The lines look remarkably stable, except that for both graphs there's a slight bump/dip at a = 40000 for the 50% isopleth, which is a bit odd. The next step is to look at them visually... and they look absolutely horrible. So I'll try some completely different values of *a*. Taking it down by a factor of 10 helped, but still doesn't look quite right. Somewhere around a = 8000 looks nice, but...
```{r, message=FALSE, warning=FALSE, echo=TRUE}
# Plot the isopleths.
plot(ska.lhs.amixed, iso=T, ufipt=F)
```
None of them look particularly Swiss-cheesy or not. I'll try a = 7000 for now and see if I can get any advice on whether that's crazy or not...

```{r, message=FALSE, warning=FALSE, echo=TRUE}
ska.lhs.a7000 <- lhs.select(ska.lhs.amixed, a=7000)
lhs.save(ska.lhs.a7000, dir='../data/processed')

ska.lxy <- lxy.nn.add(ska.lxy, s=0.007, a=7000)
lxy.save(ska.lxy, dir='../data/processed')
```